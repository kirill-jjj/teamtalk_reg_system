#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Babel.

–°–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:
- extract: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ .pot-—Ñ–∞–π–ª.
- update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ .po-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ .pot-—à–∞–±–ª–æ–Ω–∞.
- compile: –∫–æ–º–ø–∏–ª—è—Ü–∏—è .po-—Ñ–∞–π–ª–æ–≤ –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ .mo-—Ñ–∞–π–ª—ã.

–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'help'. –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
–≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ —Ç—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
"""

import sys
import subprocess
from pathlib import Path
from typing import List

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: —è–≤–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç ---
PROJECT_NAME = "teamtalk_reg_system"
COPYRIGHT_HOLDER = "kirill-jjj"
LOCALE_DOMAIN = "messages"
BABEL_CONFIG = "babel.cfg"

# --- –ü—É—Ç–∏: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ pathlib –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ ---
try:
    BASE_DIR = Path(__file__).resolve().parent
    LOCALE_DIR = BASE_DIR / "locales"
    POT_FILE = LOCALE_DIR / f"{LOCALE_DOMAIN}.pot"
except NameError:
    # This fallback might occur if the script is run in an environment
    # where __file__ is not defined (e.g., some forms of exec).
    # Using Path.cwd() as a best guess for BASE_DIR in such cases.
    BASE_DIR = Path.cwd()
    LOCALE_DIR = BASE_DIR / "locales"
    POT_FILE = LOCALE_DIR / f"{LOCALE_DOMAIN}.pot"

def run_command(command: List[str]) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–Ω–µ—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏. (–ü—Ä–∏–Ω—Ü–∏–ø DRY)

    Args:
        command: –ö–æ–º–∞–Ω–¥–∞ –∏ –µ–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.
    """
    print(f"‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {' '.join(command)}")
    try:
        # –Ø–≤–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞
        result = subprocess.run(
            command,
            check=True,  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            text=True,
            capture_output=True,
            encoding='utf-8',
            cwd=BASE_DIR # Ensure commands run from project root
        )
        # –í—ã–≤–æ–¥–∏–º stdout, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è compile --statistics)
        if result.stdout:
            print(result.stdout.strip())

    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ Babel –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –≤ PATH
        print(
            f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ '{command[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Babel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (`pip install Babel`)",
            "–∏ —á—Ç–æ –ø—É—Ç—å –∫ 'pybabel' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PATH.",
            sep="\n", file=sys.stderr
        )
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –ª–µ–≥–∫–æ–π –æ—Ç–ª–∞–¥–∫–∏
        print(
            f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {e.returncode}.",
            "--- –í—ã–≤–æ–¥ stderr: ---",
            e.stderr.strip(),
            "-----------------------",
            sep="\n", file=sys.stderr
        )
        sys.exit(1)

def extract_messages() -> None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ .pot-—Ñ–∞–π–ª."""
    command = [
        "pybabel", "extract",
        "-F", BABEL_CONFIG,
        "-o", str(POT_FILE),
        f"--project={PROJECT_NAME}",
        f"--copyright-holder={COPYRIGHT_HOLDER}",
        "--keywords=_", # Standard keyword for gettext
        "." # Search current directory and subdirectories
    ]
    run_command(command)
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –≤ '{POT_FILE.relative_to(BASE_DIR)}'")

def update_catalogs() -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç .po-—Ñ–∞–π–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ .pot-—à–∞–±–ª–æ–Ω–∞."""
    # Ensure LOCALE_DIR exists before trying to update,
    # though Babel might create it for 'init' but not always for 'update'.
    if not LOCALE_DIR.exists():
        print(f"‚ÑπÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –ª–æ–∫–∞–ª–µ–π '{LOCALE_DIR.relative_to(BASE_DIR)}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏ —è–∑—ã–∫–æ–≤—ã–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏.")
        return

    command = [
        "pybabel", "update",
        "-i", str(POT_FILE),
        "-d", str(LOCALE_DIR),
        "-D", LOCALE_DOMAIN,
        "--update-header-comment", # Update header comment in .po files
        "--previous" # Keep previous msgid lines as comments
    ]
    run_command(command)
    print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (.po) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

def compile_catalogs() -> None:
    """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç .po-—Ñ–∞–π–ª—ã –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ .mo-—Ñ–∞–π–ª—ã."""
    if not LOCALE_DIR.exists():
        print(f"‚ÑπÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –ª–æ–∫–∞–ª–µ–π '{LOCALE_DIR.relative_to(BASE_DIR)}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–ø–∏–ª—è—Ü–∏—é.")
        return

    command = [
        "pybabel", "compile",
        "-d", str(LOCALE_DIR),
        "-D", LOCALE_DOMAIN,
        "--statistics" # Show statistics about compiled files
    ]
    run_command(command)
    print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (.mo) —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã.")

def print_help() -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º docstring –º–æ–¥—É–ª—è –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ø—Ä–∞–≤–∫–∏ (–ø—Ä–∏–Ω—Ü–∏–ø DRY)
    print(sys.modules[__name__].__doc__)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  extract      - –¢–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ .pot-—Ñ–∞–π–ª.")
    print("  update       - –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ .po-—Ñ–∞–π–ª–æ–≤.")
    print("  compile      - –¢–æ–ª—å–∫–æ –∫–æ–º–ø–∏–ª—è—Ü–∏—è .mo-—Ñ–∞–π–ª–æ–≤.")
    print("  help         - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    print("\n–ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è extract, update, compile.")

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –ª–æ–≥–∏–∫–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
    actions = {
        "extract": extract_messages,
        "update": update_catalogs,
        "compile": compile_catalogs,
        "help": print_help,
    }

    action_key = sys.argv[1] if len(sys.argv) > 1 else "all"

    if action_key == "all":
        print("--- –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ---\n")
        extract_messages()
        update_catalogs()
        compile_catalogs()
        print("\nüéâ –í—Å–µ —à–∞–≥–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
    elif action_key in actions:
        actions[action_key]()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{action_key}'", file=sys.stderr)
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
