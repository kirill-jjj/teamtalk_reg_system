--- START OF FILE docs_060625232757_dir2txt.txt ---

Folder: C:\my downloads\aiogram-3.20.0.post0\docs


File: _static/basics_middleware.png
[BINARY FILE SKIPPED]


File: _static/fsm_example.png
[BINARY FILE SKIPPED]


File: _static/logo.png
[BINARY FILE SKIPPED]


File: _static/middleware_pipeline.png
[BINARY FILE SKIPPED]


File: _static/middleware_pipeline_nested.png
[BINARY FILE SKIPPED]


File: _static/nested_routers_example.png
[BINARY FILE SKIPPED]


File: _static/stylesheets/extra.css
@font-face {
    font-family: 'JetBrainsMono';
    src: url('https://cdn.jsdelivr.net/gh/JetBrains/JetBrainsMono/web/woff2/JetBrainsMono-Regular.woff2') format('woff2'),
    url('https://cdn.jsdelivr.net/gh/JetBrains/JetBrainsMono/web/woff/JetBrainsMono-Regular.woff') format('woff'),
    url('https://cdn.jsdelivr.net/gh/JetBrains/JetBrainsMono/ttf/JetBrainsMono-Regular.ttf') format('truetype');
    font-weight: 400;
    font-style: normal;
}

code, kbd, pre {
    font-family: "JetBrainsMono", "Roboto Mono", "Courier New", Courier, monospace;
}

File: _static/update_propagation_flow.png
[BINARY FILE SKIPPED]


File: api/bot.rst
###
Bot
###

Bot instance can be created from :code:`aiogram.Bot` (:code:`from aiogram import Bot`) and
you can't use methods without instance of bot with configured token.

This class has aliases for all methods and named in :code:`lower_camel_case`.

For example :code:`sendMessage` named :code:`send_message` and has the same specification with all class-based methods.

.. warning::

    A full list of methods can be found in the appropriate section of the documentation

.. autoclass:: aiogram.client.bot.Bot
    :members: __init__,token,id,context,me,download_file,download
    :show-inheritance:
    :member-order: bysource
    :special-members: __init__
    :undoc-members: True
    :noindex:

File: api/defaults.rst
===============
Global defaults
===============

aiogram provides mechanism to set some global defaults for all requests to Telegram Bot API
in your application using :class:`aiogram.client.default.DefaultBotProperties` class.

There are some properties that can be set:

.. autoclass:: aiogram.client.default.DefaultBotProperties
    :members:
    :member-order: bysource
    :undoc-members: True

.. note::

    If you need to override default properties for some requests, you should use `aiogram.client.default.DefaultBotProperties`
    only for properties that you want to set as defaults and pass explicit values for other properties.

.. danger::

    If you upgrading from aiogram 3.0-3.6 to 3.7,
    you should update your code to use `aiogram.client.default.DefaultBotProperties`.

Example
=======

Here is an example of setting default parse mode for all requests to Telegram Bot API:

.. code-block:: python

    bot = Bot(
        token=...,
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML,
        )
    )

In this case all messages sent by this bot will be parsed as HTML, so you don't need to specify `parse_mode`
in every message you send.

Instead of

.. code-block:: python

    await bot.send_message(chat_id, text, parse_mode=ParseMode.HTML)

you can use

.. code-block:: python

    await bot.send_message(chat_id, text)

and the message will be sent with HTML parse mode.

In some cases you may want to override default properties for some requests. You can do it by passing
explicit values to the method:

.. code-block:: python

    await bot.send_message(chat_id, text, parse_mode=ParseMode.MARKDOWN_V2)

In this case the message will be sent with Markdown parse mode instead of default HTML.

Another example of overriding default properties:

.. code-block:: python

    await bot.send_message(chat_id, text, parse_mode=None)

In this case the message will be send withoout parse mode, even if default parse mode is set it may be useful
if you want to send message with plain text or :ref:`aiogram.types.message_entity.MessageEntity`.

.. code-block:: python

    await bot.send_message(
        chat_id=chat_id,
        text=text,
        entities=[MessageEntity(type='bold', offset=0, length=4)],
        parse_mode=None
    )

File: api/download_file.rst
#####################
How to download file?
#####################

Download file manually
======================

First, you must get the `file_id` of the file you want to download.
Information about files sent to the bot is contained in `Message <types/message.html>`__.

For example, download the document that came to the bot.

.. code-block::

    file_id = message.document.file_id

Then use the `getFile <methods/get_file.html>`__ method to get `file_path`.

.. code-block::

    file = await bot.get_file(file_id)
    file_path = file.file_path

After that, use the `download_file <#download-file>`__ method from the bot object.

download_file(...)
------------------

Download file by `file_path` to destination.

If you want to automatically create destination (:obj:`io.BytesIO`) use default
value of destination and handle result of this method.

.. automethod:: aiogram.client.bot.Bot.download_file

There are two options where you can download the file: to **disk** or to **binary I/O object**.

Download file to disk
---------------------

To download file to disk, you must specify the file name or path where to download the file.
In this case, the function will return nothing.

.. code-block::

    await bot.download_file(file_path, "text.txt")

Download file to binary I/O object
----------------------------------

To download file to binary I/O object, you must specify an object with the
:obj:`typing.BinaryIO` type or use the default (:obj:`None`) value.

In the first case, the function will return your object:

.. code-block::

    my_object = MyBinaryIO()
    result: MyBinaryIO = await bot.download_file(file_path, my_object)
    # print(result is my_object)  # True

If you leave the default value, an :obj:`io.BytesIO` object will be created and returned.

.. code-block::

    result: io.BytesIO = await bot.download_file(file_path)


Download file in short way
==========================

Getting `file_path` manually every time is boring, so you should use the `download <#download>`__ method.

download(...)
-------------

Download file by `file_id` or `Downloadable` object to destination.

If you want to automatically create destination (:obj:`io.BytesIO`) use default
value of destination and handle result of this method.

.. automethod:: aiogram.client.bot.Bot.download

It differs from `download_file <#download-file>`__ **only** in that it accepts `file_id`
or an `Downloadable` object (object that contains the `file_id` attribute) instead of `file_path`.

You can download a file to `disk <#download-file-to-disk>`__ or to a `binary I/O <#download-file-to-binary-io-object>`__ object in the same way.

Example:

.. code-block::

    document = message.document
    await bot.download(document)

File: api/enums/bot_command_scope_type.rst
###################
BotCommandScopeType
###################


.. automodule:: aiogram.enums.bot_command_scope_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/chat_action.rst
##########
ChatAction
##########


.. automodule:: aiogram.enums.chat_action
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/chat_boost_source_type.rst
###################
ChatBoostSourceType
###################


.. automodule:: aiogram.enums.chat_boost_source_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/chat_member_status.rst
################
ChatMemberStatus
################


.. automodule:: aiogram.enums.chat_member_status
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/chat_type.rst
########
ChatType
########


.. automodule:: aiogram.enums.chat_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/content_type.rst
###########
ContentType
###########


.. automodule:: aiogram.enums.content_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/currency.rst
########
Currency
########


.. automodule:: aiogram.enums.currency
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/dice_emoji.rst
#########
DiceEmoji
#########


.. automodule:: aiogram.enums.dice_emoji
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/encrypted_passport_element.rst
########################
EncryptedPassportElement
########################


.. automodule:: aiogram.enums.encrypted_passport_element
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/index.rst
.. _enums:

#####
Enums
#####

Here is list of all available enums:


.. toctree::
    :maxdepth: 1

    bot_command_scope_type
    chat_action
    chat_boost_source_type
    chat_member_status
    chat_type
    content_type
    currency
    dice_emoji
    encrypted_passport_element
    inline_query_result_type
    input_media_type
    input_paid_media_type
    input_profile_photo_type
    input_story_content_type
    keyboard_button_poll_type_type
    mask_position_point
    menu_button_type
    message_entity_type
    message_origin_type
    owned_gift_type
    paid_media_type
    parse_mode
    passport_element_error_type
    poll_type
    reaction_type_type
    revenue_withdrawal_state_type
    sticker_format
    sticker_type
    story_area_type_type
    topic_icon_color
    transaction_partner_type
    transaction_partner_user_transaction_type_enum
    update_type

File: api/enums/inline_query_result_type.rst
#####################
InlineQueryResultType
#####################


.. automodule:: aiogram.enums.inline_query_result_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/input_media_type.rst
##############
InputMediaType
##############


.. automodule:: aiogram.enums.input_media_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/input_paid_media_type.rst
##################
InputPaidMediaType
##################


.. automodule:: aiogram.enums.input_paid_media_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/input_profile_photo_type.rst
#####################
InputProfilePhotoType
#####################


.. automodule:: aiogram.enums.input_profile_photo_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/input_story_content_type.rst
#####################
InputStoryContentType
#####################


.. automodule:: aiogram.enums.input_story_content_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/keyboard_button_poll_type_type.rst
##########################
KeyboardButtonPollTypeType
##########################


.. automodule:: aiogram.enums.keyboard_button_poll_type_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/mask_position_point.rst
#################
MaskPositionPoint
#################


.. automodule:: aiogram.enums.mask_position_point
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/menu_button_type.rst
##############
MenuButtonType
##############


.. automodule:: aiogram.enums.menu_button_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/message_entity_type.rst
#################
MessageEntityType
#################


.. automodule:: aiogram.enums.message_entity_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/message_origin_type.rst
#################
MessageOriginType
#################


.. automodule:: aiogram.enums.message_origin_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/owned_gift_type.rst
#############
OwnedGiftType
#############


.. automodule:: aiogram.enums.owned_gift_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/paid_media_type.rst
#############
PaidMediaType
#############


.. automodule:: aiogram.enums.paid_media_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/parse_mode.rst
#########
ParseMode
#########


.. automodule:: aiogram.enums.parse_mode
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/passport_element_error_type.rst
########################
PassportElementErrorType
########################


.. automodule:: aiogram.enums.passport_element_error_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/poll_type.rst
########
PollType
########


.. automodule:: aiogram.enums.poll_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/reaction_type_type.rst
################
ReactionTypeType
################


.. automodule:: aiogram.enums.reaction_type_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/revenue_withdrawal_state_type.rst
##########################
RevenueWithdrawalStateType
##########################


.. automodule:: aiogram.enums.revenue_withdrawal_state_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/sticker_format.rst
#############
StickerFormat
#############


.. automodule:: aiogram.enums.sticker_format
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/sticker_type.rst
###########
StickerType
###########


.. automodule:: aiogram.enums.sticker_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/story_area_type_type.rst
#################
StoryAreaTypeType
#################


.. automodule:: aiogram.enums.story_area_type_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/topic_icon_color.rst
##############
TopicIconColor
##############


.. automodule:: aiogram.enums.topic_icon_color
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/transaction_partner_type.rst
######################
TransactionPartnerType
######################


.. automodule:: aiogram.enums.transaction_partner_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/transaction_partner_user_transaction_type_enum.rst
#########################################
TransactionPartnerUserTransactionTypeEnum
#########################################


.. automodule:: aiogram.enums.transaction_partner_user_transaction_type_enum
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/enums/update_type.rst
##########
UpdateType
##########


.. automodule:: aiogram.enums.update_type
    :members:
    :member-order: bysource
    :undoc-members: True

File: api/index.rst
#######
Bot API
#######

**aiogram** now is fully support of `Telegram Bot API <https://core.telegram.org/bots/api>`_

All methods and types is fully autogenerated from Telegram Bot API docs by parser with code-generator.

.. toctree::
    bot
    session/index
    types/index
    methods/index
    enums/index
    download_file
    upload_file
    defaults

File: api/methods/add_sticker_to_set.rst
###############
addStickerToSet
###############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.add_sticker_to_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.add_sticker_to_set(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.add_sticker_to_set import AddStickerToSet`
- alias: :code:`from aiogram.methods import AddStickerToSet`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(AddStickerToSet(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return AddStickerToSet(...)

File: api/methods/answer_callback_query.rst
###################
answerCallbackQuery
###################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.answer_callback_query
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.answer_callback_query(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.answer_callback_query import AnswerCallbackQuery`
- alias: :code:`from aiogram.methods import AnswerCallbackQuery`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(AnswerCallbackQuery(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return AnswerCallbackQuery(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.callback_query.CallbackQuery.answer`

File: api/methods/answer_inline_query.rst
#################
answerInlineQuery
#################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.answer_inline_query
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.answer_inline_query(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.answer_inline_query import AnswerInlineQuery`
- alias: :code:`from aiogram.methods import AnswerInlineQuery`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(AnswerInlineQuery(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return AnswerInlineQuery(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.inline_query.InlineQuery.answer`

File: api/methods/answer_pre_checkout_query.rst
######################
answerPreCheckoutQuery
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.answer_pre_checkout_query
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.answer_pre_checkout_query(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.answer_pre_checkout_query import AnswerPreCheckoutQuery`
- alias: :code:`from aiogram.methods import AnswerPreCheckoutQuery`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(AnswerPreCheckoutQuery(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return AnswerPreCheckoutQuery(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.pre_checkout_query.PreCheckoutQuery.answer`

File: api/methods/answer_shipping_query.rst
###################
answerShippingQuery
###################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.answer_shipping_query
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.answer_shipping_query(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.answer_shipping_query import AnswerShippingQuery`
- alias: :code:`from aiogram.methods import AnswerShippingQuery`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(AnswerShippingQuery(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return AnswerShippingQuery(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.shipping_query.ShippingQuery.answer`

File: api/methods/answer_web_app_query.rst
#################
answerWebAppQuery
#################

Returns: :obj:`SentWebAppMessage`

.. automodule:: aiogram.methods.answer_web_app_query
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: SentWebAppMessage = await bot.answer_web_app_query(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.answer_web_app_query import AnswerWebAppQuery`
- alias: :code:`from aiogram.methods import AnswerWebAppQuery`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: SentWebAppMessage = await bot(AnswerWebAppQuery(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return AnswerWebAppQuery(...)

File: api/methods/approve_chat_join_request.rst
######################
approveChatJoinRequest
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.approve_chat_join_request
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.approve_chat_join_request(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.approve_chat_join_request import ApproveChatJoinRequest`
- alias: :code:`from aiogram.methods import ApproveChatJoinRequest`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(ApproveChatJoinRequest(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return ApproveChatJoinRequest(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.approve`

File: api/methods/ban_chat_member.rst
#############
banChatMember
#############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.ban_chat_member
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.ban_chat_member(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.ban_chat_member import BanChatMember`
- alias: :code:`from aiogram.methods import BanChatMember`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(BanChatMember(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return BanChatMember(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.ban`

File: api/methods/ban_chat_sender_chat.rst
#################
banChatSenderChat
#################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.ban_chat_sender_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.ban_chat_sender_chat(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.ban_chat_sender_chat import BanChatSenderChat`
- alias: :code:`from aiogram.methods import BanChatSenderChat`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(BanChatSenderChat(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return BanChatSenderChat(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.ban_sender_chat`

File: api/methods/close.rst
#####
close
#####

Returns: :obj:`bool`

.. automodule:: aiogram.methods.close
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.close(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.close import Close`
- alias: :code:`from aiogram.methods import Close`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(Close(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return Close(...)

File: api/methods/close_forum_topic.rst
###############
closeForumTopic
###############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.close_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.close_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.close_forum_topic import CloseForumTopic`
- alias: :code:`from aiogram.methods import CloseForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(CloseForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return CloseForumTopic(...)

File: api/methods/close_general_forum_topic.rst
######################
closeGeneralForumTopic
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.close_general_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.close_general_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.close_general_forum_topic import CloseGeneralForumTopic`
- alias: :code:`from aiogram.methods import CloseGeneralForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(CloseGeneralForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return CloseGeneralForumTopic(...)

File: api/methods/convert_gift_to_stars.rst
##################
convertGiftToStars
##################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.convert_gift_to_stars
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.convert_gift_to_stars(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.convert_gift_to_stars import ConvertGiftToStars`
- alias: :code:`from aiogram.methods import ConvertGiftToStars`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(ConvertGiftToStars(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return ConvertGiftToStars(...)

File: api/methods/copy_message.rst
###########
copyMessage
###########

Returns: :obj:`MessageId`

.. automodule:: aiogram.methods.copy_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: MessageId = await bot.copy_message(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.copy_message import CopyMessage`
- alias: :code:`from aiogram.methods import CopyMessage`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: MessageId = await bot(CopyMessage(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return CopyMessage(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.copy_to`

File: api/methods/copy_messages.rst
############
copyMessages
############

Returns: :obj:`list[MessageId]`

.. automodule:: aiogram.methods.copy_messages
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: list[MessageId] = await bot.copy_messages(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.copy_messages import CopyMessages`
- alias: :code:`from aiogram.methods import CopyMessages`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: list[MessageId] = await bot(CopyMessages(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return CopyMessages(...)

File: api/methods/create_chat_invite_link.rst
####################
createChatInviteLink
####################

Returns: :obj:`ChatInviteLink`

.. automodule:: aiogram.methods.create_chat_invite_link
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ChatInviteLink = await bot.create_chat_invite_link(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.create_chat_invite_link import CreateChatInviteLink`
- alias: :code:`from aiogram.methods import CreateChatInviteLink`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ChatInviteLink = await bot(CreateChatInviteLink(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return CreateChatInviteLink(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.create_invite_link`

File: api/methods/create_chat_subscription_invite_link.rst
################################
createChatSubscriptionInviteLink
################################

Returns: :obj:`ChatInviteLink`

.. automodule:: aiogram.methods.create_chat_subscription_invite_link
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ChatInviteLink = await bot.create_chat_subscription_invite_link(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.create_chat_subscription_invite_link import CreateChatSubscriptionInviteLink`
- alias: :code:`from aiogram.methods import CreateChatSubscriptionInviteLink`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ChatInviteLink = await bot(CreateChatSubscriptionInviteLink(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return CreateChatSubscriptionInviteLink(...)

File: api/methods/create_forum_topic.rst
################
createForumTopic
################

Returns: :obj:`ForumTopic`

.. automodule:: aiogram.methods.create_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ForumTopic = await bot.create_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.create_forum_topic import CreateForumTopic`
- alias: :code:`from aiogram.methods import CreateForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ForumTopic = await bot(CreateForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return CreateForumTopic(...)

File: api/methods/create_invoice_link.rst
#################
createInvoiceLink
#################

Returns: :obj:`str`

.. automodule:: aiogram.methods.create_invoice_link
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: str = await bot.create_invoice_link(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.create_invoice_link import CreateInvoiceLink`
- alias: :code:`from aiogram.methods import CreateInvoiceLink`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: str = await bot(CreateInvoiceLink(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return CreateInvoiceLink(...)

File: api/methods/create_new_sticker_set.rst
###################
createNewStickerSet
###################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.create_new_sticker_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.create_new_sticker_set(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.create_new_sticker_set import CreateNewStickerSet`
- alias: :code:`from aiogram.methods import CreateNewStickerSet`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(CreateNewStickerSet(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return CreateNewStickerSet(...)

File: api/methods/decline_chat_join_request.rst
######################
declineChatJoinRequest
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.decline_chat_join_request
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.decline_chat_join_request(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.decline_chat_join_request import DeclineChatJoinRequest`
- alias: :code:`from aiogram.methods import DeclineChatJoinRequest`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeclineChatJoinRequest(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeclineChatJoinRequest(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.decline`

File: api/methods/delete_business_messages.rst
######################
deleteBusinessMessages
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_business_messages
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_business_messages(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_business_messages import DeleteBusinessMessages`
- alias: :code:`from aiogram.methods import DeleteBusinessMessages`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteBusinessMessages(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteBusinessMessages(...)

File: api/methods/delete_chat_photo.rst
###############
deleteChatPhoto
###############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_chat_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_chat_photo(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_chat_photo import DeleteChatPhoto`
- alias: :code:`from aiogram.methods import DeleteChatPhoto`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteChatPhoto(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteChatPhoto(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.delete_photo`

File: api/methods/delete_chat_sticker_set.rst
####################
deleteChatStickerSet
####################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_chat_sticker_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_chat_sticker_set(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_chat_sticker_set import DeleteChatStickerSet`
- alias: :code:`from aiogram.methods import DeleteChatStickerSet`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteChatStickerSet(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteChatStickerSet(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.delete_sticker_set`

File: api/methods/delete_forum_topic.rst
################
deleteForumTopic
################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_forum_topic import DeleteForumTopic`
- alias: :code:`from aiogram.methods import DeleteForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteForumTopic(...)

File: api/methods/delete_message.rst
#############
deleteMessage
#############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_message(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_message import DeleteMessage`
- alias: :code:`from aiogram.methods import DeleteMessage`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteMessage(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteMessage(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.delete_message`
- :meth:`aiogram.types.message.Message.delete`

File: api/methods/delete_messages.rst
##############
deleteMessages
##############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_messages
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_messages(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_messages import DeleteMessages`
- alias: :code:`from aiogram.methods import DeleteMessages`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteMessages(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteMessages(...)

File: api/methods/delete_my_commands.rst
################
deleteMyCommands
################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_my_commands
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_my_commands(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_my_commands import DeleteMyCommands`
- alias: :code:`from aiogram.methods import DeleteMyCommands`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteMyCommands(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteMyCommands(...)

File: api/methods/delete_sticker_from_set.rst
####################
deleteStickerFromSet
####################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_sticker_from_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_sticker_from_set(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_sticker_from_set import DeleteStickerFromSet`
- alias: :code:`from aiogram.methods import DeleteStickerFromSet`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteStickerFromSet(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteStickerFromSet(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.sticker.Sticker.delete_from_set`

File: api/methods/delete_sticker_set.rst
################
deleteStickerSet
################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_sticker_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_sticker_set(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_sticker_set import DeleteStickerSet`
- alias: :code:`from aiogram.methods import DeleteStickerSet`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteStickerSet(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteStickerSet(...)

File: api/methods/delete_story.rst
###########
deleteStory
###########

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_story
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_story(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_story import DeleteStory`
- alias: :code:`from aiogram.methods import DeleteStory`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteStory(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteStory(...)

File: api/methods/delete_webhook.rst
#############
deleteWebhook
#############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.delete_webhook
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.delete_webhook(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.delete_webhook import DeleteWebhook`
- alias: :code:`from aiogram.methods import DeleteWebhook`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(DeleteWebhook(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return DeleteWebhook(...)

File: api/methods/edit_chat_invite_link.rst
##################
editChatInviteLink
##################

Returns: :obj:`ChatInviteLink`

.. automodule:: aiogram.methods.edit_chat_invite_link
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ChatInviteLink = await bot.edit_chat_invite_link(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_chat_invite_link import EditChatInviteLink`
- alias: :code:`from aiogram.methods import EditChatInviteLink`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ChatInviteLink = await bot(EditChatInviteLink(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditChatInviteLink(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.edit_invite_link`

File: api/methods/edit_chat_subscription_invite_link.rst
##############################
editChatSubscriptionInviteLink
##############################

Returns: :obj:`ChatInviteLink`

.. automodule:: aiogram.methods.edit_chat_subscription_invite_link
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ChatInviteLink = await bot.edit_chat_subscription_invite_link(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_chat_subscription_invite_link import EditChatSubscriptionInviteLink`
- alias: :code:`from aiogram.methods import EditChatSubscriptionInviteLink`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ChatInviteLink = await bot(EditChatSubscriptionInviteLink(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditChatSubscriptionInviteLink(...)

File: api/methods/edit_forum_topic.rst
##############
editForumTopic
##############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.edit_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.edit_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_forum_topic import EditForumTopic`
- alias: :code:`from aiogram.methods import EditForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(EditForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditForumTopic(...)

File: api/methods/edit_general_forum_topic.rst
#####################
editGeneralForumTopic
#####################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.edit_general_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.edit_general_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_general_forum_topic import EditGeneralForumTopic`
- alias: :code:`from aiogram.methods import EditGeneralForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(EditGeneralForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditGeneralForumTopic(...)

File: api/methods/edit_message_caption.rst
##################
editMessageCaption
##################

Returns: :obj:`Union[Message, bool]`

.. automodule:: aiogram.methods.edit_message_caption
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Union[Message, bool] = await bot.edit_message_caption(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_message_caption import EditMessageCaption`
- alias: :code:`from aiogram.methods import EditMessageCaption`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Union[Message, bool] = await bot(EditMessageCaption(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditMessageCaption(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.edit_caption`

File: api/methods/edit_message_live_location.rst
#######################
editMessageLiveLocation
#######################

Returns: :obj:`Union[Message, bool]`

.. automodule:: aiogram.methods.edit_message_live_location
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Union[Message, bool] = await bot.edit_message_live_location(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_message_live_location import EditMessageLiveLocation`
- alias: :code:`from aiogram.methods import EditMessageLiveLocation`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Union[Message, bool] = await bot(EditMessageLiveLocation(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditMessageLiveLocation(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.edit_live_location`

File: api/methods/edit_message_media.rst
################
editMessageMedia
################

Returns: :obj:`Union[Message, bool]`

.. automodule:: aiogram.methods.edit_message_media
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Union[Message, bool] = await bot.edit_message_media(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_message_media import EditMessageMedia`
- alias: :code:`from aiogram.methods import EditMessageMedia`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Union[Message, bool] = await bot(EditMessageMedia(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditMessageMedia(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.edit_media`

File: api/methods/edit_message_reply_markup.rst
######################
editMessageReplyMarkup
######################

Returns: :obj:`Union[Message, bool]`

.. automodule:: aiogram.methods.edit_message_reply_markup
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Union[Message, bool] = await bot.edit_message_reply_markup(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_message_reply_markup import EditMessageReplyMarkup`
- alias: :code:`from aiogram.methods import EditMessageReplyMarkup`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Union[Message, bool] = await bot(EditMessageReplyMarkup(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditMessageReplyMarkup(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.edit_reply_markup`
- :meth:`aiogram.types.message.Message.delete_reply_markup`

File: api/methods/edit_message_text.rst
###############
editMessageText
###############

Returns: :obj:`Union[Message, bool]`

.. automodule:: aiogram.methods.edit_message_text
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Union[Message, bool] = await bot.edit_message_text(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_message_text import EditMessageText`
- alias: :code:`from aiogram.methods import EditMessageText`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Union[Message, bool] = await bot(EditMessageText(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditMessageText(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.edit_text`

File: api/methods/edit_story.rst
#########
editStory
#########

Returns: :obj:`Story`

.. automodule:: aiogram.methods.edit_story
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Story = await bot.edit_story(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_story import EditStory`
- alias: :code:`from aiogram.methods import EditStory`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Story = await bot(EditStory(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditStory(...)

File: api/methods/edit_user_star_subscription.rst
########################
editUserStarSubscription
########################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.edit_user_star_subscription
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.edit_user_star_subscription(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.edit_user_star_subscription import EditUserStarSubscription`
- alias: :code:`from aiogram.methods import EditUserStarSubscription`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(EditUserStarSubscription(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return EditUserStarSubscription(...)

File: api/methods/export_chat_invite_link.rst
####################
exportChatInviteLink
####################

Returns: :obj:`str`

.. automodule:: aiogram.methods.export_chat_invite_link
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: str = await bot.export_chat_invite_link(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.export_chat_invite_link import ExportChatInviteLink`
- alias: :code:`from aiogram.methods import ExportChatInviteLink`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: str = await bot(ExportChatInviteLink(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return ExportChatInviteLink(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.export_invite_link`

File: api/methods/forward_message.rst
##############
forwardMessage
##############

Returns: :obj:`Message`

.. automodule:: aiogram.methods.forward_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.forward_message(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.forward_message import ForwardMessage`
- alias: :code:`from aiogram.methods import ForwardMessage`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(ForwardMessage(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return ForwardMessage(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.forward`

File: api/methods/forward_messages.rst
###############
forwardMessages
###############

Returns: :obj:`list[MessageId]`

.. automodule:: aiogram.methods.forward_messages
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: list[MessageId] = await bot.forward_messages(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.forward_messages import ForwardMessages`
- alias: :code:`from aiogram.methods import ForwardMessages`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: list[MessageId] = await bot(ForwardMessages(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return ForwardMessages(...)

File: api/methods/get_available_gifts.rst
#################
getAvailableGifts
#################

Returns: :obj:`Gifts`

.. automodule:: aiogram.methods.get_available_gifts
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Gifts = await bot.get_available_gifts(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_available_gifts import GetAvailableGifts`
- alias: :code:`from aiogram.methods import GetAvailableGifts`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Gifts = await bot(GetAvailableGifts(...))

File: api/methods/get_business_account_gifts.rst
#######################
getBusinessAccountGifts
#######################

Returns: :obj:`OwnedGifts`

.. automodule:: aiogram.methods.get_business_account_gifts
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: OwnedGifts = await bot.get_business_account_gifts(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts`
- alias: :code:`from aiogram.methods import GetBusinessAccountGifts`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: OwnedGifts = await bot(GetBusinessAccountGifts(...))

File: api/methods/get_business_account_star_balance.rst
#############################
getBusinessAccountStarBalance
#############################

Returns: :obj:`StarAmount`

.. automodule:: aiogram.methods.get_business_account_star_balance
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: StarAmount = await bot.get_business_account_star_balance(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_business_account_star_balance import GetBusinessAccountStarBalance`
- alias: :code:`from aiogram.methods import GetBusinessAccountStarBalance`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: StarAmount = await bot(GetBusinessAccountStarBalance(...))

File: api/methods/get_business_connection.rst
#####################
getBusinessConnection
#####################

Returns: :obj:`BusinessConnection`

.. automodule:: aiogram.methods.get_business_connection
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: BusinessConnection = await bot.get_business_connection(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_business_connection import GetBusinessConnection`
- alias: :code:`from aiogram.methods import GetBusinessConnection`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: BusinessConnection = await bot(GetBusinessConnection(...))

File: api/methods/get_chat.rst
#######
getChat
#######

Returns: :obj:`ChatFullInfo`

.. automodule:: aiogram.methods.get_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ChatFullInfo = await bot.get_chat(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_chat import GetChat`
- alias: :code:`from aiogram.methods import GetChat`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ChatFullInfo = await bot(GetChat(...))

File: api/methods/get_chat_administrators.rst
#####################
getChatAdministrators
#####################

Returns: :obj:`list[ResultChatMemberUnion]`

.. automodule:: aiogram.methods.get_chat_administrators
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: list[ResultChatMemberUnion] = await bot.get_chat_administrators(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_chat_administrators import GetChatAdministrators`
- alias: :code:`from aiogram.methods import GetChatAdministrators`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: list[ResultChatMemberUnion] = await bot(GetChatAdministrators(...))




As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.get_administrators`

File: api/methods/get_chat_member.rst
#############
getChatMember
#############

Returns: :obj:`ResultChatMemberUnion`

.. automodule:: aiogram.methods.get_chat_member
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ResultChatMemberUnion = await bot.get_chat_member(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_chat_member import GetChatMember`
- alias: :code:`from aiogram.methods import GetChatMember`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ResultChatMemberUnion = await bot(GetChatMember(...))




As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.get_member`

File: api/methods/get_chat_member_count.rst
##################
getChatMemberCount
##################

Returns: :obj:`int`

.. automodule:: aiogram.methods.get_chat_member_count
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: int = await bot.get_chat_member_count(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_chat_member_count import GetChatMemberCount`
- alias: :code:`from aiogram.methods import GetChatMemberCount`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: int = await bot(GetChatMemberCount(...))




As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.get_member_count`

File: api/methods/get_chat_menu_button.rst
#################
getChatMenuButton
#################

Returns: :obj:`ResultMenuButtonUnion`

.. automodule:: aiogram.methods.get_chat_menu_button
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ResultMenuButtonUnion = await bot.get_chat_menu_button(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_chat_menu_button import GetChatMenuButton`
- alias: :code:`from aiogram.methods import GetChatMenuButton`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ResultMenuButtonUnion = await bot(GetChatMenuButton(...))

File: api/methods/get_custom_emoji_stickers.rst
######################
getCustomEmojiStickers
######################

Returns: :obj:`list[Sticker]`

.. automodule:: aiogram.methods.get_custom_emoji_stickers
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: list[Sticker] = await bot.get_custom_emoji_stickers(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_custom_emoji_stickers import GetCustomEmojiStickers`
- alias: :code:`from aiogram.methods import GetCustomEmojiStickers`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: list[Sticker] = await bot(GetCustomEmojiStickers(...))

File: api/methods/get_file.rst
#######
getFile
#######

Returns: :obj:`File`

.. automodule:: aiogram.methods.get_file
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: File = await bot.get_file(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_file import GetFile`
- alias: :code:`from aiogram.methods import GetFile`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: File = await bot(GetFile(...))

File: api/methods/get_forum_topic_icon_stickers.rst
#########################
getForumTopicIconStickers
#########################

Returns: :obj:`list[Sticker]`

.. automodule:: aiogram.methods.get_forum_topic_icon_stickers
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: list[Sticker] = await bot.get_forum_topic_icon_stickers(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_forum_topic_icon_stickers import GetForumTopicIconStickers`
- alias: :code:`from aiogram.methods import GetForumTopicIconStickers`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: list[Sticker] = await bot(GetForumTopicIconStickers(...))

File: api/methods/get_game_high_scores.rst
#################
getGameHighScores
#################

Returns: :obj:`list[GameHighScore]`

.. automodule:: aiogram.methods.get_game_high_scores
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: list[GameHighScore] = await bot.get_game_high_scores(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_game_high_scores import GetGameHighScores`
- alias: :code:`from aiogram.methods import GetGameHighScores`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: list[GameHighScore] = await bot(GetGameHighScores(...))

File: api/methods/get_me.rst
#####
getMe
#####

Returns: :obj:`User`

.. automodule:: aiogram.methods.get_me
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: User = await bot.get_me(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_me import GetMe`
- alias: :code:`from aiogram.methods import GetMe`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: User = await bot(GetMe(...))

File: api/methods/get_my_commands.rst
#############
getMyCommands
#############

Returns: :obj:`list[BotCommand]`

.. automodule:: aiogram.methods.get_my_commands
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: list[BotCommand] = await bot.get_my_commands(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_my_commands import GetMyCommands`
- alias: :code:`from aiogram.methods import GetMyCommands`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: list[BotCommand] = await bot(GetMyCommands(...))

File: api/methods/get_my_default_administrator_rights.rst
###############################
getMyDefaultAdministratorRights
###############################

Returns: :obj:`ChatAdministratorRights`

.. automodule:: aiogram.methods.get_my_default_administrator_rights
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ChatAdministratorRights = await bot.get_my_default_administrator_rights(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_my_default_administrator_rights import GetMyDefaultAdministratorRights`
- alias: :code:`from aiogram.methods import GetMyDefaultAdministratorRights`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ChatAdministratorRights = await bot(GetMyDefaultAdministratorRights(...))

File: api/methods/get_my_description.rst
################
getMyDescription
################

Returns: :obj:`BotDescription`

.. automodule:: aiogram.methods.get_my_description
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: BotDescription = await bot.get_my_description(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_my_description import GetMyDescription`
- alias: :code:`from aiogram.methods import GetMyDescription`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: BotDescription = await bot(GetMyDescription(...))

File: api/methods/get_my_name.rst
#########
getMyName
#########

Returns: :obj:`BotName`

.. automodule:: aiogram.methods.get_my_name
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: BotName = await bot.get_my_name(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_my_name import GetMyName`
- alias: :code:`from aiogram.methods import GetMyName`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: BotName = await bot(GetMyName(...))

File: api/methods/get_my_short_description.rst
#####################
getMyShortDescription
#####################

Returns: :obj:`BotShortDescription`

.. automodule:: aiogram.methods.get_my_short_description
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: BotShortDescription = await bot.get_my_short_description(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_my_short_description import GetMyShortDescription`
- alias: :code:`from aiogram.methods import GetMyShortDescription`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: BotShortDescription = await bot(GetMyShortDescription(...))

File: api/methods/get_star_transactions.rst
###################
getStarTransactions
###################

Returns: :obj:`StarTransactions`

.. automodule:: aiogram.methods.get_star_transactions
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: StarTransactions = await bot.get_star_transactions(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_star_transactions import GetStarTransactions`
- alias: :code:`from aiogram.methods import GetStarTransactions`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: StarTransactions = await bot(GetStarTransactions(...))

File: api/methods/get_sticker_set.rst
#############
getStickerSet
#############

Returns: :obj:`StickerSet`

.. automodule:: aiogram.methods.get_sticker_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: StickerSet = await bot.get_sticker_set(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_sticker_set import GetStickerSet`
- alias: :code:`from aiogram.methods import GetStickerSet`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: StickerSet = await bot(GetStickerSet(...))

File: api/methods/get_updates.rst
##########
getUpdates
##########

Returns: :obj:`list[Update]`

.. automodule:: aiogram.methods.get_updates
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: list[Update] = await bot.get_updates(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_updates import GetUpdates`
- alias: :code:`from aiogram.methods import GetUpdates`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: list[Update] = await bot(GetUpdates(...))

File: api/methods/get_user_chat_boosts.rst
#################
getUserChatBoosts
#################

Returns: :obj:`UserChatBoosts`

.. automodule:: aiogram.methods.get_user_chat_boosts
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: UserChatBoosts = await bot.get_user_chat_boosts(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_user_chat_boosts import GetUserChatBoosts`
- alias: :code:`from aiogram.methods import GetUserChatBoosts`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: UserChatBoosts = await bot(GetUserChatBoosts(...))

File: api/methods/get_user_profile_photos.rst
####################
getUserProfilePhotos
####################

Returns: :obj:`UserProfilePhotos`

.. automodule:: aiogram.methods.get_user_profile_photos
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: UserProfilePhotos = await bot.get_user_profile_photos(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_user_profile_photos import GetUserProfilePhotos`
- alias: :code:`from aiogram.methods import GetUserProfilePhotos`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: UserProfilePhotos = await bot(GetUserProfilePhotos(...))




As shortcut from received object
--------------------------------

- :meth:`aiogram.types.user.User.get_profile_photos`

File: api/methods/get_webhook_info.rst
##############
getWebhookInfo
##############

Returns: :obj:`WebhookInfo`

.. automodule:: aiogram.methods.get_webhook_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: WebhookInfo = await bot.get_webhook_info(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.get_webhook_info import GetWebhookInfo`
- alias: :code:`from aiogram.methods import GetWebhookInfo`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: WebhookInfo = await bot(GetWebhookInfo(...))

File: api/methods/gift_premium_subscription.rst
#######################
giftPremiumSubscription
#######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.gift_premium_subscription
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.gift_premium_subscription(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.gift_premium_subscription import GiftPremiumSubscription`
- alias: :code:`from aiogram.methods import GiftPremiumSubscription`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(GiftPremiumSubscription(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return GiftPremiumSubscription(...)

File: api/methods/hide_general_forum_topic.rst
#####################
hideGeneralForumTopic
#####################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.hide_general_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.hide_general_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.hide_general_forum_topic import HideGeneralForumTopic`
- alias: :code:`from aiogram.methods import HideGeneralForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(HideGeneralForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return HideGeneralForumTopic(...)

File: api/methods/index.rst
#######
Methods
#######

Here is list of all available API methods:


Stickers
========

.. toctree::
    :maxdepth: 1

    add_sticker_to_set
    create_new_sticker_set
    delete_sticker_from_set
    delete_sticker_set
    get_custom_emoji_stickers
    get_sticker_set
    replace_sticker_in_set
    send_sticker
    set_custom_emoji_sticker_set_thumbnail
    set_sticker_emoji_list
    set_sticker_keywords
    set_sticker_mask_position
    set_sticker_position_in_set
    set_sticker_set_thumbnail
    set_sticker_set_title
    upload_sticker_file

Available methods
=================

.. toctree::
    :maxdepth: 1

    answer_callback_query
    approve_chat_join_request
    ban_chat_member
    ban_chat_sender_chat
    close
    close_forum_topic
    close_general_forum_topic
    copy_message
    copy_messages
    create_chat_invite_link
    create_chat_subscription_invite_link
    create_forum_topic
    decline_chat_join_request
    delete_chat_photo
    delete_chat_sticker_set
    delete_forum_topic
    delete_my_commands
    edit_chat_invite_link
    edit_chat_subscription_invite_link
    edit_forum_topic
    edit_general_forum_topic
    export_chat_invite_link
    forward_message
    forward_messages
    get_business_connection
    get_chat
    get_chat_administrators
    get_chat_member
    get_chat_member_count
    get_chat_menu_button
    get_file
    get_forum_topic_icon_stickers
    get_me
    get_my_commands
    get_my_default_administrator_rights
    get_my_description
    get_my_name
    get_my_short_description
    get_user_chat_boosts
    get_user_profile_photos
    hide_general_forum_topic
    leave_chat
    log_out
    pin_chat_message
    promote_chat_member
    reopen_forum_topic
    reopen_general_forum_topic
    restrict_chat_member
    revoke_chat_invite_link
    send_animation
    send_audio
    send_chat_action
    send_contact
    send_dice
    send_document
    send_location
    send_media_group
    send_message
    send_paid_media
    send_photo
    send_poll
    send_venue
    send_video
    send_video_note
    send_voice
    set_chat_administrator_custom_title
    set_chat_description
    set_chat_menu_button
    set_chat_permissions
    set_chat_photo
    set_chat_sticker_set
    set_chat_title
    set_message_reaction
    set_my_commands
    set_my_default_administrator_rights
    set_my_description
    set_my_name
    set_my_short_description
    set_user_emoji_status
    unban_chat_member
    unban_chat_sender_chat
    unhide_general_forum_topic
    unpin_all_chat_messages
    unpin_all_forum_topic_messages
    unpin_all_general_forum_topic_messages
    unpin_chat_message

Updating messages
=================

.. toctree::
    :maxdepth: 1

    convert_gift_to_stars
    delete_business_messages
    delete_message
    delete_messages
    delete_story
    edit_message_caption
    edit_message_live_location
    edit_message_media
    edit_message_reply_markup
    edit_message_text
    edit_story
    get_available_gifts
    get_business_account_gifts
    get_business_account_star_balance
    gift_premium_subscription
    post_story
    read_business_message
    remove_business_account_profile_photo
    remove_chat_verification
    remove_user_verification
    send_gift
    set_business_account_bio
    set_business_account_gift_settings
    set_business_account_name
    set_business_account_profile_photo
    set_business_account_username
    stop_message_live_location
    stop_poll
    transfer_business_account_stars
    transfer_gift
    upgrade_gift
    verify_chat
    verify_user

Inline mode
===========

.. toctree::
    :maxdepth: 1

    answer_inline_query
    answer_web_app_query
    save_prepared_inline_message

Games
=====

.. toctree::
    :maxdepth: 1

    get_game_high_scores
    send_game
    set_game_score

Payments
========

.. toctree::
    :maxdepth: 1

    answer_pre_checkout_query
    answer_shipping_query
    create_invoice_link
    edit_user_star_subscription
    get_star_transactions
    refund_star_payment
    send_invoice

Getting updates
===============

.. toctree::
    :maxdepth: 1

    delete_webhook
    get_updates
    get_webhook_info
    set_webhook

Telegram Passport
=================

.. toctree::
    :maxdepth: 1

    set_passport_data_errors

File: api/methods/leave_chat.rst
#########
leaveChat
#########

Returns: :obj:`bool`

.. automodule:: aiogram.methods.leave_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.leave_chat(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.leave_chat import LeaveChat`
- alias: :code:`from aiogram.methods import LeaveChat`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(LeaveChat(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return LeaveChat(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.leave`

File: api/methods/log_out.rst
######
logOut
######

Returns: :obj:`bool`

.. automodule:: aiogram.methods.log_out
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.log_out(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.log_out import LogOut`
- alias: :code:`from aiogram.methods import LogOut`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(LogOut(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return LogOut(...)

File: api/methods/pin_chat_message.rst
##############
pinChatMessage
##############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.pin_chat_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.pin_chat_message(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.pin_chat_message import PinChatMessage`
- alias: :code:`from aiogram.methods import PinChatMessage`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(PinChatMessage(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return PinChatMessage(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.pin_message`
- :meth:`aiogram.types.message.Message.pin`

File: api/methods/post_story.rst
#########
postStory
#########

Returns: :obj:`Story`

.. automodule:: aiogram.methods.post_story
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Story = await bot.post_story(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.post_story import PostStory`
- alias: :code:`from aiogram.methods import PostStory`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Story = await bot(PostStory(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return PostStory(...)

File: api/methods/promote_chat_member.rst
#################
promoteChatMember
#################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.promote_chat_member
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.promote_chat_member(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.promote_chat_member import PromoteChatMember`
- alias: :code:`from aiogram.methods import PromoteChatMember`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(PromoteChatMember(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return PromoteChatMember(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.promote`

File: api/methods/read_business_message.rst
###################
readBusinessMessage
###################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.read_business_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.read_business_message(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.read_business_message import ReadBusinessMessage`
- alias: :code:`from aiogram.methods import ReadBusinessMessage`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(ReadBusinessMessage(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return ReadBusinessMessage(...)

File: api/methods/refund_star_payment.rst
#################
refundStarPayment
#################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.refund_star_payment
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.refund_star_payment(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.refund_star_payment import RefundStarPayment`
- alias: :code:`from aiogram.methods import RefundStarPayment`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(RefundStarPayment(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return RefundStarPayment(...)

File: api/methods/remove_business_account_profile_photo.rst
#################################
removeBusinessAccountProfilePhoto
#################################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.remove_business_account_profile_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.remove_business_account_profile_photo(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.remove_business_account_profile_photo import RemoveBusinessAccountProfilePhoto`
- alias: :code:`from aiogram.methods import RemoveBusinessAccountProfilePhoto`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(RemoveBusinessAccountProfilePhoto(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return RemoveBusinessAccountProfilePhoto(...)

File: api/methods/remove_chat_verification.rst
######################
removeChatVerification
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.remove_chat_verification
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.remove_chat_verification(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.remove_chat_verification import RemoveChatVerification`
- alias: :code:`from aiogram.methods import RemoveChatVerification`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(RemoveChatVerification(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return RemoveChatVerification(...)

File: api/methods/remove_user_verification.rst
######################
removeUserVerification
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.remove_user_verification
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.remove_user_verification(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.remove_user_verification import RemoveUserVerification`
- alias: :code:`from aiogram.methods import RemoveUserVerification`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(RemoveUserVerification(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return RemoveUserVerification(...)

File: api/methods/reopen_forum_topic.rst
################
reopenForumTopic
################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.reopen_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.reopen_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.reopen_forum_topic import ReopenForumTopic`
- alias: :code:`from aiogram.methods import ReopenForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(ReopenForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return ReopenForumTopic(...)

File: api/methods/reopen_general_forum_topic.rst
#######################
reopenGeneralForumTopic
#######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.reopen_general_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.reopen_general_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.reopen_general_forum_topic import ReopenGeneralForumTopic`
- alias: :code:`from aiogram.methods import ReopenGeneralForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(ReopenGeneralForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return ReopenGeneralForumTopic(...)

File: api/methods/replace_sticker_in_set.rst
###################
replaceStickerInSet
###################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.replace_sticker_in_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.replace_sticker_in_set(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.replace_sticker_in_set import ReplaceStickerInSet`
- alias: :code:`from aiogram.methods import ReplaceStickerInSet`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(ReplaceStickerInSet(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return ReplaceStickerInSet(...)

File: api/methods/restrict_chat_member.rst
##################
restrictChatMember
##################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.restrict_chat_member
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.restrict_chat_member(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.restrict_chat_member import RestrictChatMember`
- alias: :code:`from aiogram.methods import RestrictChatMember`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(RestrictChatMember(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return RestrictChatMember(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.restrict`

File: api/methods/revoke_chat_invite_link.rst
####################
revokeChatInviteLink
####################

Returns: :obj:`ChatInviteLink`

.. automodule:: aiogram.methods.revoke_chat_invite_link
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: ChatInviteLink = await bot.revoke_chat_invite_link(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.revoke_chat_invite_link import RevokeChatInviteLink`
- alias: :code:`from aiogram.methods import RevokeChatInviteLink`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: ChatInviteLink = await bot(RevokeChatInviteLink(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return RevokeChatInviteLink(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.revoke_invite_link`

File: api/methods/save_prepared_inline_message.rst
#########################
savePreparedInlineMessage
#########################

Returns: :obj:`PreparedInlineMessage`

.. automodule:: aiogram.methods.save_prepared_inline_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: PreparedInlineMessage = await bot.save_prepared_inline_message(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.save_prepared_inline_message import SavePreparedInlineMessage`
- alias: :code:`from aiogram.methods import SavePreparedInlineMessage`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: PreparedInlineMessage = await bot(SavePreparedInlineMessage(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SavePreparedInlineMessage(...)

File: api/methods/send_animation.rst
#############
sendAnimation
#############

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_animation
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_animation(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_animation import SendAnimation`
- alias: :code:`from aiogram.methods import SendAnimation`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendAnimation(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendAnimation(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_animation`
- :meth:`aiogram.types.message.Message.reply_animation`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_animation`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_animation`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_animation`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_animation`

File: api/methods/send_audio.rst
#########
sendAudio
#########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_audio
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_audio(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_audio import SendAudio`
- alias: :code:`from aiogram.methods import SendAudio`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendAudio(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendAudio(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_audio`
- :meth:`aiogram.types.message.Message.reply_audio`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_audio`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_audio`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_audio`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_audio`

File: api/methods/send_chat_action.rst
##############
sendChatAction
##############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.send_chat_action
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.send_chat_action(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_chat_action import SendChatAction`
- alias: :code:`from aiogram.methods import SendChatAction`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SendChatAction(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendChatAction(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.do`

File: api/methods/send_contact.rst
###########
sendContact
###########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_contact
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_contact(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_contact import SendContact`
- alias: :code:`from aiogram.methods import SendContact`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendContact(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendContact(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_contact`
- :meth:`aiogram.types.message.Message.reply_contact`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_contact`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_contact`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_contact`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_contact`

File: api/methods/send_dice.rst
########
sendDice
########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_dice
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_dice(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_dice import SendDice`
- alias: :code:`from aiogram.methods import SendDice`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendDice(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendDice(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_dice`
- :meth:`aiogram.types.message.Message.reply_dice`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_dice`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_dice`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_dice`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_dice`

File: api/methods/send_document.rst
############
sendDocument
############

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_document
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_document(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_document import SendDocument`
- alias: :code:`from aiogram.methods import SendDocument`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendDocument(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendDocument(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_document`
- :meth:`aiogram.types.message.Message.reply_document`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_document`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_document`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_document`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_document`

File: api/methods/send_game.rst
########
sendGame
########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_game
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_game(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_game import SendGame`
- alias: :code:`from aiogram.methods import SendGame`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendGame(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendGame(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_game`
- :meth:`aiogram.types.message.Message.reply_game`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_game`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_game`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_game`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_game`

File: api/methods/send_gift.rst
########
sendGift
########

Returns: :obj:`bool`

.. automodule:: aiogram.methods.send_gift
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.send_gift(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_gift import SendGift`
- alias: :code:`from aiogram.methods import SendGift`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SendGift(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendGift(...)

File: api/methods/send_invoice.rst
###########
sendInvoice
###########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_invoice
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_invoice(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_invoice import SendInvoice`
- alias: :code:`from aiogram.methods import SendInvoice`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendInvoice(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendInvoice(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_invoice`
- :meth:`aiogram.types.message.Message.reply_invoice`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_invoice`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_invoice`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_invoice`

File: api/methods/send_location.rst
############
sendLocation
############

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_location
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_location(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_location import SendLocation`
- alias: :code:`from aiogram.methods import SendLocation`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendLocation(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendLocation(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_location`
- :meth:`aiogram.types.message.Message.reply_location`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_location`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_location`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_location`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_location`

File: api/methods/send_media_group.rst
##############
sendMediaGroup
##############

Returns: :obj:`list[Message]`

.. automodule:: aiogram.methods.send_media_group
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: list[Message] = await bot.send_media_group(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_media_group import SendMediaGroup`
- alias: :code:`from aiogram.methods import SendMediaGroup`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: list[Message] = await bot(SendMediaGroup(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendMediaGroup(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_media_group`
- :meth:`aiogram.types.message.Message.reply_media_group`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_media_group`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_media_group`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_media_group`

File: api/methods/send_message.rst
###########
sendMessage
###########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_message(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_message import SendMessage`
- alias: :code:`from aiogram.methods import SendMessage`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendMessage(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendMessage(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer`
- :meth:`aiogram.types.message.Message.reply`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply`

File: api/methods/send_paid_media.rst
#############
sendPaidMedia
#############

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_paid_media
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_paid_media(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_paid_media import SendPaidMedia`
- alias: :code:`from aiogram.methods import SendPaidMedia`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendPaidMedia(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendPaidMedia(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_paid_media`
- :meth:`aiogram.types.message.Message.reply_paid_media`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_paid_media`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_paid_media`

File: api/methods/send_photo.rst
#########
sendPhoto
#########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_photo(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_photo import SendPhoto`
- alias: :code:`from aiogram.methods import SendPhoto`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendPhoto(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendPhoto(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_photo`
- :meth:`aiogram.types.message.Message.reply_photo`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_photo`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_photo`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_photo`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_photo`

File: api/methods/send_poll.rst
########
sendPoll
########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_poll
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_poll(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_poll import SendPoll`
- alias: :code:`from aiogram.methods import SendPoll`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendPoll(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendPoll(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_poll`
- :meth:`aiogram.types.message.Message.reply_poll`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_poll`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_poll`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_poll`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_poll`

File: api/methods/send_sticker.rst
###########
sendSticker
###########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_sticker
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_sticker(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_sticker import SendSticker`
- alias: :code:`from aiogram.methods import SendSticker`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendSticker(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendSticker(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_sticker`
- :meth:`aiogram.types.message.Message.reply_sticker`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_sticker`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_sticker`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_sticker`

File: api/methods/send_venue.rst
#########
sendVenue
#########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_venue
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_venue(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_venue import SendVenue`
- alias: :code:`from aiogram.methods import SendVenue`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendVenue(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendVenue(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_venue`
- :meth:`aiogram.types.message.Message.reply_venue`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_venue`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_venue`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_venue`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_venue`

File: api/methods/send_video.rst
#########
sendVideo
#########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_video
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_video(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_video import SendVideo`
- alias: :code:`from aiogram.methods import SendVideo`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendVideo(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendVideo(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_video`
- :meth:`aiogram.types.message.Message.reply_video`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_video`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_video`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_video`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_video`

File: api/methods/send_video_note.rst
#############
sendVideoNote
#############

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_video_note
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_video_note(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_video_note import SendVideoNote`
- alias: :code:`from aiogram.methods import SendVideoNote`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendVideoNote(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendVideoNote(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_video_note`
- :meth:`aiogram.types.message.Message.reply_video_note`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_video_note`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_video_note`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_video_note`

File: api/methods/send_voice.rst
#########
sendVoice
#########

Returns: :obj:`Message`

.. automodule:: aiogram.methods.send_voice
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Message = await bot.send_voice(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.send_voice import SendVoice`
- alias: :code:`from aiogram.methods import SendVoice`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Message = await bot(SendVoice(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SendVoice(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.answer_voice`
- :meth:`aiogram.types.message.Message.reply_voice`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_voice`
- :meth:`aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm`
- :meth:`aiogram.types.chat_member_updated.ChatMemberUpdated.answer_voice`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.answer_voice`
- :meth:`aiogram.types.inaccessible_message.InaccessibleMessage.reply_voice`

File: api/methods/set_business_account_bio.rst
#####################
setBusinessAccountBio
#####################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_business_account_bio
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_business_account_bio(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_business_account_bio import SetBusinessAccountBio`
- alias: :code:`from aiogram.methods import SetBusinessAccountBio`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetBusinessAccountBio(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetBusinessAccountBio(...)

File: api/methods/set_business_account_gift_settings.rst
##############################
setBusinessAccountGiftSettings
##############################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_business_account_gift_settings
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_business_account_gift_settings(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_business_account_gift_settings import SetBusinessAccountGiftSettings`
- alias: :code:`from aiogram.methods import SetBusinessAccountGiftSettings`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetBusinessAccountGiftSettings(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetBusinessAccountGiftSettings(...)

File: api/methods/set_business_account_name.rst
######################
setBusinessAccountName
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_business_account_name
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_business_account_name(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_business_account_name import SetBusinessAccountName`
- alias: :code:`from aiogram.methods import SetBusinessAccountName`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetBusinessAccountName(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetBusinessAccountName(...)

File: api/methods/set_business_account_profile_photo.rst
##############################
setBusinessAccountProfilePhoto
##############################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_business_account_profile_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_business_account_profile_photo(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_business_account_profile_photo import SetBusinessAccountProfilePhoto`
- alias: :code:`from aiogram.methods import SetBusinessAccountProfilePhoto`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetBusinessAccountProfilePhoto(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetBusinessAccountProfilePhoto(...)

File: api/methods/set_business_account_username.rst
##########################
setBusinessAccountUsername
##########################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_business_account_username
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_business_account_username(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_business_account_username import SetBusinessAccountUsername`
- alias: :code:`from aiogram.methods import SetBusinessAccountUsername`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetBusinessAccountUsername(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetBusinessAccountUsername(...)

File: api/methods/set_chat_administrator_custom_title.rst
###############################
setChatAdministratorCustomTitle
###############################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_chat_administrator_custom_title
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_chat_administrator_custom_title(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_chat_administrator_custom_title import SetChatAdministratorCustomTitle`
- alias: :code:`from aiogram.methods import SetChatAdministratorCustomTitle`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetChatAdministratorCustomTitle(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetChatAdministratorCustomTitle(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.set_administrator_custom_title`

File: api/methods/set_chat_description.rst
##################
setChatDescription
##################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_chat_description
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_chat_description(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_chat_description import SetChatDescription`
- alias: :code:`from aiogram.methods import SetChatDescription`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetChatDescription(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetChatDescription(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.set_description`

File: api/methods/set_chat_menu_button.rst
#################
setChatMenuButton
#################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_chat_menu_button
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_chat_menu_button(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_chat_menu_button import SetChatMenuButton`
- alias: :code:`from aiogram.methods import SetChatMenuButton`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetChatMenuButton(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetChatMenuButton(...)

File: api/methods/set_chat_permissions.rst
##################
setChatPermissions
##################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_chat_permissions
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_chat_permissions(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_chat_permissions import SetChatPermissions`
- alias: :code:`from aiogram.methods import SetChatPermissions`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetChatPermissions(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetChatPermissions(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.set_permissions`

File: api/methods/set_chat_photo.rst
############
setChatPhoto
############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_chat_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_chat_photo(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_chat_photo import SetChatPhoto`
- alias: :code:`from aiogram.methods import SetChatPhoto`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetChatPhoto(...))




As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.set_photo`

File: api/methods/set_chat_sticker_set.rst
#################
setChatStickerSet
#################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_chat_sticker_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_chat_sticker_set(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_chat_sticker_set import SetChatStickerSet`
- alias: :code:`from aiogram.methods import SetChatStickerSet`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetChatStickerSet(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetChatStickerSet(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.set_sticker_set`

File: api/methods/set_chat_title.rst
############
setChatTitle
############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_chat_title
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_chat_title(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_chat_title import SetChatTitle`
- alias: :code:`from aiogram.methods import SetChatTitle`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetChatTitle(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetChatTitle(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.set_title`

File: api/methods/set_custom_emoji_sticker_set_thumbnail.rst
#################################
setCustomEmojiStickerSetThumbnail
#################################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_custom_emoji_sticker_set_thumbnail
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_custom_emoji_sticker_set_thumbnail(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_custom_emoji_sticker_set_thumbnail import SetCustomEmojiStickerSetThumbnail`
- alias: :code:`from aiogram.methods import SetCustomEmojiStickerSetThumbnail`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetCustomEmojiStickerSetThumbnail(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetCustomEmojiStickerSetThumbnail(...)

File: api/methods/set_game_score.rst
############
setGameScore
############

Returns: :obj:`Union[Message, bool]`

.. automodule:: aiogram.methods.set_game_score
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Union[Message, bool] = await bot.set_game_score(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_game_score import SetGameScore`
- alias: :code:`from aiogram.methods import SetGameScore`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Union[Message, bool] = await bot(SetGameScore(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetGameScore(...)

File: api/methods/set_message_reaction.rst
##################
setMessageReaction
##################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_message_reaction
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_message_reaction(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_message_reaction import SetMessageReaction`
- alias: :code:`from aiogram.methods import SetMessageReaction`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetMessageReaction(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetMessageReaction(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.react`

File: api/methods/set_my_commands.rst
#############
setMyCommands
#############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_my_commands
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_my_commands(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_my_commands import SetMyCommands`
- alias: :code:`from aiogram.methods import SetMyCommands`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetMyCommands(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetMyCommands(...)

File: api/methods/set_my_default_administrator_rights.rst
###############################
setMyDefaultAdministratorRights
###############################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_my_default_administrator_rights
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_my_default_administrator_rights(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_my_default_administrator_rights import SetMyDefaultAdministratorRights`
- alias: :code:`from aiogram.methods import SetMyDefaultAdministratorRights`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetMyDefaultAdministratorRights(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetMyDefaultAdministratorRights(...)

File: api/methods/set_my_description.rst
################
setMyDescription
################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_my_description
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_my_description(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_my_description import SetMyDescription`
- alias: :code:`from aiogram.methods import SetMyDescription`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetMyDescription(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetMyDescription(...)

File: api/methods/set_my_name.rst
#########
setMyName
#########

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_my_name
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_my_name(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_my_name import SetMyName`
- alias: :code:`from aiogram.methods import SetMyName`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetMyName(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetMyName(...)

File: api/methods/set_my_short_description.rst
#####################
setMyShortDescription
#####################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_my_short_description
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_my_short_description(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_my_short_description import SetMyShortDescription`
- alias: :code:`from aiogram.methods import SetMyShortDescription`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetMyShortDescription(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetMyShortDescription(...)

File: api/methods/set_passport_data_errors.rst
#####################
setPassportDataErrors
#####################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_passport_data_errors
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_passport_data_errors(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_passport_data_errors import SetPassportDataErrors`
- alias: :code:`from aiogram.methods import SetPassportDataErrors`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetPassportDataErrors(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetPassportDataErrors(...)

File: api/methods/set_sticker_emoji_list.rst
###################
setStickerEmojiList
###################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_sticker_emoji_list
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_sticker_emoji_list(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_sticker_emoji_list import SetStickerEmojiList`
- alias: :code:`from aiogram.methods import SetStickerEmojiList`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetStickerEmojiList(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetStickerEmojiList(...)

File: api/methods/set_sticker_keywords.rst
##################
setStickerKeywords
##################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_sticker_keywords
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_sticker_keywords(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_sticker_keywords import SetStickerKeywords`
- alias: :code:`from aiogram.methods import SetStickerKeywords`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetStickerKeywords(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetStickerKeywords(...)

File: api/methods/set_sticker_mask_position.rst
######################
setStickerMaskPosition
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_sticker_mask_position
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_sticker_mask_position(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_sticker_mask_position import SetStickerMaskPosition`
- alias: :code:`from aiogram.methods import SetStickerMaskPosition`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetStickerMaskPosition(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetStickerMaskPosition(...)

File: api/methods/set_sticker_position_in_set.rst
#######################
setStickerPositionInSet
#######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_sticker_position_in_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_sticker_position_in_set(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_sticker_position_in_set import SetStickerPositionInSet`
- alias: :code:`from aiogram.methods import SetStickerPositionInSet`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetStickerPositionInSet(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetStickerPositionInSet(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.sticker.Sticker.set_position_in_set`

File: api/methods/set_sticker_set_thumbnail.rst
######################
setStickerSetThumbnail
######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_sticker_set_thumbnail
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_sticker_set_thumbnail(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_sticker_set_thumbnail import SetStickerSetThumbnail`
- alias: :code:`from aiogram.methods import SetStickerSetThumbnail`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetStickerSetThumbnail(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetStickerSetThumbnail(...)

File: api/methods/set_sticker_set_title.rst
##################
setStickerSetTitle
##################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_sticker_set_title
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_sticker_set_title(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_sticker_set_title import SetStickerSetTitle`
- alias: :code:`from aiogram.methods import SetStickerSetTitle`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetStickerSetTitle(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetStickerSetTitle(...)

File: api/methods/set_user_emoji_status.rst
##################
setUserEmojiStatus
##################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_user_emoji_status
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_user_emoji_status(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_user_emoji_status import SetUserEmojiStatus`
- alias: :code:`from aiogram.methods import SetUserEmojiStatus`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetUserEmojiStatus(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetUserEmojiStatus(...)

File: api/methods/set_webhook.rst
##########
setWebhook
##########

Returns: :obj:`bool`

.. automodule:: aiogram.methods.set_webhook
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.set_webhook(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.set_webhook import SetWebhook`
- alias: :code:`from aiogram.methods import SetWebhook`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(SetWebhook(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return SetWebhook(...)

File: api/methods/stop_message_live_location.rst
#######################
stopMessageLiveLocation
#######################

Returns: :obj:`Union[Message, bool]`

.. automodule:: aiogram.methods.stop_message_live_location
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Union[Message, bool] = await bot.stop_message_live_location(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.stop_message_live_location import StopMessageLiveLocation`
- alias: :code:`from aiogram.methods import StopMessageLiveLocation`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Union[Message, bool] = await bot(StopMessageLiveLocation(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return StopMessageLiveLocation(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.message.Message.stop_live_location`

File: api/methods/stop_poll.rst
########
stopPoll
########

Returns: :obj:`Poll`

.. automodule:: aiogram.methods.stop_poll
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: Poll = await bot.stop_poll(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.stop_poll import StopPoll`
- alias: :code:`from aiogram.methods import StopPoll`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: Poll = await bot(StopPoll(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return StopPoll(...)

File: api/methods/transfer_business_account_stars.rst
############################
transferBusinessAccountStars
############################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.transfer_business_account_stars
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.transfer_business_account_stars(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.transfer_business_account_stars import TransferBusinessAccountStars`
- alias: :code:`from aiogram.methods import TransferBusinessAccountStars`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(TransferBusinessAccountStars(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return TransferBusinessAccountStars(...)

File: api/methods/transfer_gift.rst
############
transferGift
############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.transfer_gift
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.transfer_gift(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.transfer_gift import TransferGift`
- alias: :code:`from aiogram.methods import TransferGift`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(TransferGift(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return TransferGift(...)

File: api/methods/unban_chat_member.rst
###############
unbanChatMember
###############

Returns: :obj:`bool`

.. automodule:: aiogram.methods.unban_chat_member
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.unban_chat_member(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.unban_chat_member import UnbanChatMember`
- alias: :code:`from aiogram.methods import UnbanChatMember`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(UnbanChatMember(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return UnbanChatMember(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.unban`

File: api/methods/unban_chat_sender_chat.rst
###################
unbanChatSenderChat
###################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.unban_chat_sender_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.unban_chat_sender_chat(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.unban_chat_sender_chat import UnbanChatSenderChat`
- alias: :code:`from aiogram.methods import UnbanChatSenderChat`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(UnbanChatSenderChat(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return UnbanChatSenderChat(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.unban_sender_chat`

File: api/methods/unhide_general_forum_topic.rst
#######################
unhideGeneralForumTopic
#######################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.unhide_general_forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.unhide_general_forum_topic(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.unhide_general_forum_topic import UnhideGeneralForumTopic`
- alias: :code:`from aiogram.methods import UnhideGeneralForumTopic`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(UnhideGeneralForumTopic(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return UnhideGeneralForumTopic(...)

File: api/methods/unpin_all_chat_messages.rst
####################
unpinAllChatMessages
####################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.unpin_all_chat_messages
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.unpin_all_chat_messages(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.unpin_all_chat_messages import UnpinAllChatMessages`
- alias: :code:`from aiogram.methods import UnpinAllChatMessages`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(UnpinAllChatMessages(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return UnpinAllChatMessages(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.unpin_all_messages`

File: api/methods/unpin_all_forum_topic_messages.rst
##########################
unpinAllForumTopicMessages
##########################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.unpin_all_forum_topic_messages
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.unpin_all_forum_topic_messages(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.unpin_all_forum_topic_messages import UnpinAllForumTopicMessages`
- alias: :code:`from aiogram.methods import UnpinAllForumTopicMessages`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(UnpinAllForumTopicMessages(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return UnpinAllForumTopicMessages(...)

File: api/methods/unpin_all_general_forum_topic_messages.rst
#################################
unpinAllGeneralForumTopicMessages
#################################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.unpin_all_general_forum_topic_messages
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.unpin_all_general_forum_topic_messages(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.unpin_all_general_forum_topic_messages import UnpinAllGeneralForumTopicMessages`
- alias: :code:`from aiogram.methods import UnpinAllGeneralForumTopicMessages`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(UnpinAllGeneralForumTopicMessages(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return UnpinAllGeneralForumTopicMessages(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.unpin_all_general_forum_topic_messages`

File: api/methods/unpin_chat_message.rst
################
unpinChatMessage
################

Returns: :obj:`bool`

.. automodule:: aiogram.methods.unpin_chat_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.unpin_chat_message(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.unpin_chat_message import UnpinChatMessage`
- alias: :code:`from aiogram.methods import UnpinChatMessage`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(UnpinChatMessage(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return UnpinChatMessage(...)


As shortcut from received object
--------------------------------

- :meth:`aiogram.types.chat.Chat.unpin_message`
- :meth:`aiogram.types.message.Message.unpin`

File: api/methods/upgrade_gift.rst
###########
upgradeGift
###########

Returns: :obj:`bool`

.. automodule:: aiogram.methods.upgrade_gift
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.upgrade_gift(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.upgrade_gift import UpgradeGift`
- alias: :code:`from aiogram.methods import UpgradeGift`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(UpgradeGift(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return UpgradeGift(...)

File: api/methods/upload_sticker_file.rst
#################
uploadStickerFile
#################

Returns: :obj:`File`

.. automodule:: aiogram.methods.upload_sticker_file
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: File = await bot.upload_sticker_file(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.upload_sticker_file import UploadStickerFile`
- alias: :code:`from aiogram.methods import UploadStickerFile`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: File = await bot(UploadStickerFile(...))

File: api/methods/verify_chat.rst
##########
verifyChat
##########

Returns: :obj:`bool`

.. automodule:: aiogram.methods.verify_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.verify_chat(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.verify_chat import VerifyChat`
- alias: :code:`from aiogram.methods import VerifyChat`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(VerifyChat(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return VerifyChat(...)

File: api/methods/verify_user.rst
##########
verifyUser
##########

Returns: :obj:`bool`

.. automodule:: aiogram.methods.verify_user
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields


Usage
=====

As bot method
-------------

.. code-block::

    result: bool = await bot.verify_user(...)


Method as object
----------------

Imports:

- :code:`from aiogram.methods.verify_user import VerifyUser`
- alias: :code:`from aiogram.methods import VerifyUser`

With specific bot
~~~~~~~~~~~~~~~~~

.. code-block:: python

    result: bool = await bot(VerifyUser(...))

As reply into Webhook in handler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    return VerifyUser(...)

File: api/session/aiohttp.rst
#######
aiohttp
#######

AiohttpSession represents a wrapper-class around `ClientSession` from `aiohttp <https://pypi.org/project/aiohttp/>`_

Currently `AiohttpSession` is a default session used in `aiogram.Bot`

.. autoclass:: aiogram.client.session.aiohttp.AiohttpSession

Usage example
=============

.. code-block::

    from aiogram import Bot
    from aiogram.client.session.aiohttp import AiohttpSession

    session = AiohttpSession()
    bot = Bot('42:token', session=session)


Proxy requests in AiohttpSession
================================

In order to use AiohttpSession with proxy connector you have to install `aiohttp-socks <https://pypi.org/project/aiohttp-socks>`_

Binding session to bot:

.. code-block::

    from aiogram import Bot
    from aiogram.client.session.aiohttp import AiohttpSession

    session = AiohttpSession(proxy="protocol://host:port/")
    bot = Bot(token="bot token", session=session)


.. note::

    Only following protocols are supported: http(tunneling), socks4(a), socks5
    as aiohttp_socks `documentation <https://github.com/romis2012/aiohttp-socks/blob/master/README.md>`_ claims.


Authorization
-------------

Proxy authorization credentials can be specified in proxy URL or come as an instance of :obj:`aiohttp.BasicAuth` containing
login and password.

Consider examples:

.. code-block::

    from aiohttp import BasicAuth
    from aiogram.client.session.aiohttp import AiohttpSession

    auth = BasicAuth(login="user", password="password")
    session = AiohttpSession(proxy=("protocol://host:port", auth))


or simply include your basic auth credential in URL

.. code-block::

    session = AiohttpSession(proxy="protocol://user:password@host:port")


.. note::

    Aiogram prefers `BasicAuth` over username and password in URL, so
    if proxy URL contains login and password and `BasicAuth` object is passed at the same time
    aiogram will use login and password from `BasicAuth` instance.


Proxy chains
------------

Since `aiohttp-socks <https://pypi.org/project/aiohttp-socks/>`_ supports proxy chains, you're able to use them in aiogram

Example of chain proxies:

.. code-block::

    from aiohttp import BasicAuth
    from aiogram.client.session.aiohttp import AiohttpSession

    auth = BasicAuth(login="user", password="password")
    session = AiohttpSession(
        proxy={
            "protocol0://host0:port0",
            "protocol1://user:password@host1:port1",
            ("protocol2://host2:port2", auth),
        }  # can be any iterable if not set
    )

File: api/session/base.rst
####
Base
####

Abstract session for all client sessions

.. autoclass:: aiogram.client.session.base.BaseSession
    :members:

File: api/session/custom_server.rst
Use Custom API server
=====================

For example, if you want to use self-hosted API server:

.. code-block:: python

    session = AiohttpSession(
        api=TelegramAPIServer.from_base('http://localhost:8082')
    )
    bot = Bot(..., session=session)

.. autoclass:: aiogram.client.telegram.TelegramAPIServer
    :members:

File: api/session/index.rst
##############
Client session
##############

Client sessions is used for interacting with API server.

.. toctree::
    custom_server
    base
    aiohttp
    middleware

File: api/session/middleware.rst
##########################
Client session middlewares
##########################

In some cases you may want to add some middlewares to the client session to customize the behavior of the client.

Some useful cases that is:

- Log the outgoing requests
- Customize the request parameters
- Handle rate limiting errors and retry the request
- others ...

So, you can do it using client session middlewares.
A client session middleware is a function (or callable class) that receives the request and the next middleware to call.
The middleware can modify the request and then call the next middleware to continue the request processing.

How to register client session middleware?
==========================================

Register using register method
------------------------------

.. code-block:: python

    bot.session.middleware(RequestLogging(ignore_methods=[GetUpdates]))

Register using decorator
------------------------

.. code-block:: python

    @bot.session.middleware()
    async def my_middleware(
        make_request: NextRequestMiddlewareType[TelegramType],
        bot: "Bot",
        method: TelegramMethod[TelegramType],
    ) -> Response[TelegramType]:
        # do something with request
        return await make_request(bot, method)


Example
=======

Class based session middleware
------------------------------

.. literalinclude:: ../../../aiogram/client/session/middlewares/request_logging.py
    :lines: 16-
    :language: python
    :linenos:

.. note::

    this middleware is already implemented inside aiogram, so, if you want to use it you can
    just import it :code:`from aiogram.client.session.middlewares.request_logging import RequestLogging`


Function based session middleware
---------------------------------

.. code-block:: python

    async def __call__(
        self,
        make_request: NextRequestMiddlewareType[TelegramType],
        bot: "Bot",
        method: TelegramMethod[TelegramType],
    ) -> Response[TelegramType]:
        try:
            # do something with request
            return await make_request(bot, method)
        finally:
            # do something after request

File: api/types/accepted_gift_types.rst
#################
AcceptedGiftTypes
#################


.. automodule:: aiogram.types.accepted_gift_types
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/affiliate_info.rst
#############
AffiliateInfo
#############


.. automodule:: aiogram.types.affiliate_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/animation.rst
#########
Animation
#########


.. automodule:: aiogram.types.animation
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/audio.rst
#####
Audio
#####


.. automodule:: aiogram.types.audio
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/background_fill.rst
##############
BackgroundFill
##############


.. automodule:: aiogram.types.background_fill
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/background_fill_freeform_gradient.rst
##############################
BackgroundFillFreeformGradient
##############################


.. automodule:: aiogram.types.background_fill_freeform_gradient
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/background_fill_gradient.rst
######################
BackgroundFillGradient
######################


.. automodule:: aiogram.types.background_fill_gradient
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/background_fill_solid.rst
###################
BackgroundFillSolid
###################


.. automodule:: aiogram.types.background_fill_solid
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/background_type.rst
##############
BackgroundType
##############


.. automodule:: aiogram.types.background_type
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/background_type_chat_theme.rst
#######################
BackgroundTypeChatTheme
#######################


.. automodule:: aiogram.types.background_type_chat_theme
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/background_type_fill.rst
##################
BackgroundTypeFill
##################


.. automodule:: aiogram.types.background_type_fill
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/background_type_pattern.rst
#####################
BackgroundTypePattern
#####################


.. automodule:: aiogram.types.background_type_pattern
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/background_type_wallpaper.rst
#######################
BackgroundTypeWallpaper
#######################


.. automodule:: aiogram.types.background_type_wallpaper
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/birthdate.rst
#########
Birthdate
#########


.. automodule:: aiogram.types.birthdate
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_command.rst
##########
BotCommand
##########


.. automodule:: aiogram.types.bot_command
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_command_scope.rst
###############
BotCommandScope
###############


.. automodule:: aiogram.types.bot_command_scope
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_command_scope_all_chat_administrators.rst
####################################
BotCommandScopeAllChatAdministrators
####################################


.. automodule:: aiogram.types.bot_command_scope_all_chat_administrators
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_command_scope_all_group_chats.rst
############################
BotCommandScopeAllGroupChats
############################


.. automodule:: aiogram.types.bot_command_scope_all_group_chats
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_command_scope_all_private_chats.rst
##############################
BotCommandScopeAllPrivateChats
##############################


.. automodule:: aiogram.types.bot_command_scope_all_private_chats
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_command_scope_chat.rst
###################
BotCommandScopeChat
###################


.. automodule:: aiogram.types.bot_command_scope_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_command_scope_chat_administrators.rst
#################################
BotCommandScopeChatAdministrators
#################################


.. automodule:: aiogram.types.bot_command_scope_chat_administrators
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_command_scope_chat_member.rst
#########################
BotCommandScopeChatMember
#########################


.. automodule:: aiogram.types.bot_command_scope_chat_member
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_command_scope_default.rst
######################
BotCommandScopeDefault
######################


.. automodule:: aiogram.types.bot_command_scope_default
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_description.rst
##############
BotDescription
##############


.. automodule:: aiogram.types.bot_description
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_name.rst
#######
BotName
#######


.. automodule:: aiogram.types.bot_name
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/bot_short_description.rst
###################
BotShortDescription
###################


.. automodule:: aiogram.types.bot_short_description
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/business_bot_rights.rst
#################
BusinessBotRights
#################


.. automodule:: aiogram.types.business_bot_rights
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/business_connection.rst
##################
BusinessConnection
##################


.. automodule:: aiogram.types.business_connection
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/business_intro.rst
#############
BusinessIntro
#############


.. automodule:: aiogram.types.business_intro
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/business_location.rst
################
BusinessLocation
################


.. automodule:: aiogram.types.business_location
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/business_messages_deleted.rst
#######################
BusinessMessagesDeleted
#######################


.. automodule:: aiogram.types.business_messages_deleted
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/business_opening_hours.rst
####################
BusinessOpeningHours
####################


.. automodule:: aiogram.types.business_opening_hours
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/business_opening_hours_interval.rst
############################
BusinessOpeningHoursInterval
############################


.. automodule:: aiogram.types.business_opening_hours_interval
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/callback_game.rst
############
CallbackGame
############


.. automodule:: aiogram.types.callback_game
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/callback_query.rst
#############
CallbackQuery
#############


.. automodule:: aiogram.types.callback_query
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat.rst
####
Chat
####


.. automodule:: aiogram.types.chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_administrator_rights.rst
#######################
ChatAdministratorRights
#######################


.. automodule:: aiogram.types.chat_administrator_rights
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_background.rst
##############
ChatBackground
##############


.. automodule:: aiogram.types.chat_background
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_boost.rst
#########
ChatBoost
#########


.. automodule:: aiogram.types.chat_boost
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_boost_added.rst
##############
ChatBoostAdded
##############


.. automodule:: aiogram.types.chat_boost_added
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_boost_removed.rst
################
ChatBoostRemoved
################


.. automodule:: aiogram.types.chat_boost_removed
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_boost_source.rst
###############
ChatBoostSource
###############


.. automodule:: aiogram.types.chat_boost_source
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_boost_source_gift_code.rst
#######################
ChatBoostSourceGiftCode
#######################


.. automodule:: aiogram.types.chat_boost_source_gift_code
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_boost_source_giveaway.rst
#######################
ChatBoostSourceGiveaway
#######################


.. automodule:: aiogram.types.chat_boost_source_giveaway
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_boost_source_premium.rst
######################
ChatBoostSourcePremium
######################


.. automodule:: aiogram.types.chat_boost_source_premium
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_boost_updated.rst
################
ChatBoostUpdated
################


.. automodule:: aiogram.types.chat_boost_updated
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_full_info.rst
############
ChatFullInfo
############


.. automodule:: aiogram.types.chat_full_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_invite_link.rst
##############
ChatInviteLink
##############


.. automodule:: aiogram.types.chat_invite_link
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_join_request.rst
###############
ChatJoinRequest
###############


.. automodule:: aiogram.types.chat_join_request
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_location.rst
############
ChatLocation
############


.. automodule:: aiogram.types.chat_location
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_member.rst
##########
ChatMember
##########


.. automodule:: aiogram.types.chat_member
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_member_administrator.rst
#######################
ChatMemberAdministrator
#######################


.. automodule:: aiogram.types.chat_member_administrator
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_member_banned.rst
################
ChatMemberBanned
################


.. automodule:: aiogram.types.chat_member_banned
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_member_left.rst
##############
ChatMemberLeft
##############


.. automodule:: aiogram.types.chat_member_left
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_member_member.rst
################
ChatMemberMember
################


.. automodule:: aiogram.types.chat_member_member
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_member_owner.rst
###############
ChatMemberOwner
###############


.. automodule:: aiogram.types.chat_member_owner
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_member_restricted.rst
####################
ChatMemberRestricted
####################


.. automodule:: aiogram.types.chat_member_restricted
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_member_updated.rst
#################
ChatMemberUpdated
#################


.. automodule:: aiogram.types.chat_member_updated
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_permissions.rst
###############
ChatPermissions
###############


.. automodule:: aiogram.types.chat_permissions
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_photo.rst
#########
ChatPhoto
#########


.. automodule:: aiogram.types.chat_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chat_shared.rst
##########
ChatShared
##########


.. automodule:: aiogram.types.chat_shared
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/chosen_inline_result.rst
##################
ChosenInlineResult
##################


.. automodule:: aiogram.types.chosen_inline_result
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/contact.rst
#######
Contact
#######


.. automodule:: aiogram.types.contact
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/copy_text_button.rst
##############
CopyTextButton
##############


.. automodule:: aiogram.types.copy_text_button
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/dice.rst
####
Dice
####


.. automodule:: aiogram.types.dice
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/document.rst
########
Document
########


.. automodule:: aiogram.types.document
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/encrypted_credentials.rst
####################
EncryptedCredentials
####################


.. automodule:: aiogram.types.encrypted_credentials
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/encrypted_passport_element.rst
########################
EncryptedPassportElement
########################


.. automodule:: aiogram.types.encrypted_passport_element
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/external_reply_info.rst
#################
ExternalReplyInfo
#################


.. automodule:: aiogram.types.external_reply_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/file.rst
####
File
####


.. automodule:: aiogram.types.file
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/force_reply.rst
##########
ForceReply
##########


.. automodule:: aiogram.types.force_reply
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/forum_topic.rst
##########
ForumTopic
##########


.. automodule:: aiogram.types.forum_topic
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/forum_topic_closed.rst
################
ForumTopicClosed
################


.. automodule:: aiogram.types.forum_topic_closed
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/forum_topic_created.rst
#################
ForumTopicCreated
#################


.. automodule:: aiogram.types.forum_topic_created
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/forum_topic_edited.rst
################
ForumTopicEdited
################


.. automodule:: aiogram.types.forum_topic_edited
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/forum_topic_reopened.rst
##################
ForumTopicReopened
##################


.. automodule:: aiogram.types.forum_topic_reopened
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/game.rst
####
Game
####


.. automodule:: aiogram.types.game
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/game_high_score.rst
#############
GameHighScore
#############


.. automodule:: aiogram.types.game_high_score
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/general_forum_topic_hidden.rst
#######################
GeneralForumTopicHidden
#######################


.. automodule:: aiogram.types.general_forum_topic_hidden
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/general_forum_topic_unhidden.rst
#########################
GeneralForumTopicUnhidden
#########################


.. automodule:: aiogram.types.general_forum_topic_unhidden
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/gift.rst
####
Gift
####


.. automodule:: aiogram.types.gift
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/gift_info.rst
########
GiftInfo
########


.. automodule:: aiogram.types.gift_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/gifts.rst
#####
Gifts
#####


.. automodule:: aiogram.types.gifts
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/giveaway.rst
########
Giveaway
########


.. automodule:: aiogram.types.giveaway
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/giveaway_completed.rst
#################
GiveawayCompleted
#################


.. automodule:: aiogram.types.giveaway_completed
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/giveaway_created.rst
###############
GiveawayCreated
###############


.. automodule:: aiogram.types.giveaway_created
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/giveaway_winners.rst
###############
GiveawayWinners
###############


.. automodule:: aiogram.types.giveaway_winners
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inaccessible_message.rst
###################
InaccessibleMessage
###################


.. automodule:: aiogram.types.inaccessible_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/index.rst
#####
Types
#####

Here is list of all available API types:


Available types
===============

.. toctree::
    :maxdepth: 1

    accepted_gift_types
    animation
    audio
    background_fill
    background_fill_freeform_gradient
    background_fill_gradient
    background_fill_solid
    background_type
    background_type_chat_theme
    background_type_fill
    background_type_pattern
    background_type_wallpaper
    birthdate
    bot_command
    bot_command_scope
    bot_command_scope_all_chat_administrators
    bot_command_scope_all_group_chats
    bot_command_scope_all_private_chats
    bot_command_scope_chat
    bot_command_scope_chat_administrators
    bot_command_scope_chat_member
    bot_command_scope_default
    bot_description
    bot_name
    bot_short_description
    business_bot_rights
    business_connection
    business_intro
    business_location
    business_messages_deleted
    business_opening_hours
    business_opening_hours_interval
    callback_query
    chat
    chat_administrator_rights
    chat_background
    chat_boost
    chat_boost_added
    chat_boost_removed
    chat_boost_source
    chat_boost_source_gift_code
    chat_boost_source_giveaway
    chat_boost_source_premium
    chat_boost_updated
    chat_full_info
    chat_invite_link
    chat_join_request
    chat_location
    chat_member
    chat_member_administrator
    chat_member_banned
    chat_member_left
    chat_member_member
    chat_member_owner
    chat_member_restricted
    chat_member_updated
    chat_permissions
    chat_photo
    chat_shared
    contact
    copy_text_button
    dice
    document
    external_reply_info
    file
    force_reply
    forum_topic
    forum_topic_closed
    forum_topic_created
    forum_topic_edited
    forum_topic_reopened
    general_forum_topic_hidden
    general_forum_topic_unhidden
    gift
    gift_info
    gifts
    giveaway
    giveaway_completed
    giveaway_created
    giveaway_winners
    inaccessible_message
    inline_keyboard_button
    inline_keyboard_markup
    input_file
    input_media
    input_media_animation
    input_media_audio
    input_media_document
    input_media_photo
    input_media_video
    input_paid_media
    input_paid_media_photo
    input_paid_media_video
    input_poll_option
    input_profile_photo
    input_profile_photo_animated
    input_profile_photo_static
    input_story_content
    input_story_content_photo
    input_story_content_video
    keyboard_button
    keyboard_button_poll_type
    keyboard_button_request_chat
    keyboard_button_request_user
    keyboard_button_request_users
    link_preview_options
    location
    location_address
    login_url
    maybe_inaccessible_message
    menu_button
    menu_button_commands
    menu_button_default
    menu_button_web_app
    message
    message_auto_delete_timer_changed
    message_entity
    message_id
    message_origin
    message_origin_channel
    message_origin_chat
    message_origin_hidden_user
    message_origin_user
    message_reaction_count_updated
    message_reaction_updated
    owned_gift
    owned_gift_regular
    owned_gift_unique
    owned_gifts
    paid_media
    paid_media_info
    paid_media_photo
    paid_media_preview
    paid_media_video
    paid_message_price_changed
    photo_size
    poll
    poll_answer
    poll_option
    proximity_alert_triggered
    reaction_count
    reaction_type
    reaction_type_custom_emoji
    reaction_type_emoji
    reaction_type_paid
    reply_keyboard_markup
    reply_keyboard_remove
    reply_parameters
    response_parameters
    shared_user
    star_amount
    story
    story_area
    story_area_position
    story_area_type
    story_area_type_link
    story_area_type_location
    story_area_type_suggested_reaction
    story_area_type_unique_gift
    story_area_type_weather
    switch_inline_query_chosen_chat
    text_quote
    unique_gift
    unique_gift_backdrop
    unique_gift_backdrop_colors
    unique_gift_info
    unique_gift_model
    unique_gift_symbol
    user
    user_chat_boosts
    user_profile_photos
    user_shared
    users_shared
    venue
    video
    video_chat_ended
    video_chat_participants_invited
    video_chat_scheduled
    video_chat_started
    video_note
    voice
    web_app_data
    web_app_info
    write_access_allowed

Inline mode
===========

.. toctree::
    :maxdepth: 1

    chosen_inline_result
    inline_query
    inline_query_result
    inline_query_result_article
    inline_query_result_audio
    inline_query_result_cached_audio
    inline_query_result_cached_document
    inline_query_result_cached_gif
    inline_query_result_cached_mpeg4_gif
    inline_query_result_cached_photo
    inline_query_result_cached_sticker
    inline_query_result_cached_video
    inline_query_result_cached_voice
    inline_query_result_contact
    inline_query_result_document
    inline_query_result_game
    inline_query_result_gif
    inline_query_result_location
    inline_query_result_mpeg4_gif
    inline_query_result_photo
    inline_query_result_venue
    inline_query_result_video
    inline_query_result_voice
    inline_query_results_button
    input_contact_message_content
    input_invoice_message_content
    input_location_message_content
    input_message_content
    input_text_message_content
    input_venue_message_content
    prepared_inline_message
    sent_web_app_message

Payments
========

.. toctree::
    :maxdepth: 1

    affiliate_info
    invoice
    labeled_price
    order_info
    paid_media_purchased
    pre_checkout_query
    refunded_payment
    revenue_withdrawal_state
    revenue_withdrawal_state_failed
    revenue_withdrawal_state_pending
    revenue_withdrawal_state_succeeded
    shipping_address
    shipping_option
    shipping_query
    star_transaction
    star_transactions
    successful_payment
    transaction_partner
    transaction_partner_affiliate_program
    transaction_partner_chat
    transaction_partner_fragment
    transaction_partner_other
    transaction_partner_telegram_ads
    transaction_partner_telegram_api
    transaction_partner_user

Stickers
========

.. toctree::
    :maxdepth: 1

    input_sticker
    mask_position
    sticker
    sticker_set

Telegram Passport
=================

.. toctree::
    :maxdepth: 1

    encrypted_credentials
    encrypted_passport_element
    passport_data
    passport_element_error
    passport_element_error_data_field
    passport_element_error_file
    passport_element_error_files
    passport_element_error_front_side
    passport_element_error_reverse_side
    passport_element_error_selfie
    passport_element_error_translation_file
    passport_element_error_translation_files
    passport_element_error_unspecified
    passport_file

Getting updates
===============

.. toctree::
    :maxdepth: 1

    update
    webhook_info

Games
=====

.. toctree::
    :maxdepth: 1

    callback_game
    game
    game_high_score

File: api/types/inline_keyboard_button.rst
####################
InlineKeyboardButton
####################


.. automodule:: aiogram.types.inline_keyboard_button
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_keyboard_markup.rst
####################
InlineKeyboardMarkup
####################


.. automodule:: aiogram.types.inline_keyboard_markup
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query.rst
###########
InlineQuery
###########


.. automodule:: aiogram.types.inline_query
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result.rst
#################
InlineQueryResult
#################


.. automodule:: aiogram.types.inline_query_result
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_article.rst
########################
InlineQueryResultArticle
########################


.. automodule:: aiogram.types.inline_query_result_article
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_audio.rst
######################
InlineQueryResultAudio
######################


.. automodule:: aiogram.types.inline_query_result_audio
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_cached_audio.rst
############################
InlineQueryResultCachedAudio
############################


.. automodule:: aiogram.types.inline_query_result_cached_audio
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_cached_document.rst
###############################
InlineQueryResultCachedDocument
###############################


.. automodule:: aiogram.types.inline_query_result_cached_document
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_cached_gif.rst
##########################
InlineQueryResultCachedGif
##########################


.. automodule:: aiogram.types.inline_query_result_cached_gif
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_cached_mpeg4_gif.rst
###############################
InlineQueryResultCachedMpeg4Gif
###############################


.. automodule:: aiogram.types.inline_query_result_cached_mpeg4_gif
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_cached_photo.rst
############################
InlineQueryResultCachedPhoto
############################


.. automodule:: aiogram.types.inline_query_result_cached_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_cached_sticker.rst
##############################
InlineQueryResultCachedSticker
##############################


.. automodule:: aiogram.types.inline_query_result_cached_sticker
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_cached_video.rst
############################
InlineQueryResultCachedVideo
############################


.. automodule:: aiogram.types.inline_query_result_cached_video
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_cached_voice.rst
############################
InlineQueryResultCachedVoice
############################


.. automodule:: aiogram.types.inline_query_result_cached_voice
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_contact.rst
########################
InlineQueryResultContact
########################


.. automodule:: aiogram.types.inline_query_result_contact
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_document.rst
#########################
InlineQueryResultDocument
#########################


.. automodule:: aiogram.types.inline_query_result_document
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_game.rst
#####################
InlineQueryResultGame
#####################


.. automodule:: aiogram.types.inline_query_result_game
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_gif.rst
####################
InlineQueryResultGif
####################


.. automodule:: aiogram.types.inline_query_result_gif
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_location.rst
#########################
InlineQueryResultLocation
#########################


.. automodule:: aiogram.types.inline_query_result_location
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_mpeg4_gif.rst
#########################
InlineQueryResultMpeg4Gif
#########################


.. automodule:: aiogram.types.inline_query_result_mpeg4_gif
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_photo.rst
######################
InlineQueryResultPhoto
######################


.. automodule:: aiogram.types.inline_query_result_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_venue.rst
######################
InlineQueryResultVenue
######################


.. automodule:: aiogram.types.inline_query_result_venue
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_video.rst
######################
InlineQueryResultVideo
######################


.. automodule:: aiogram.types.inline_query_result_video
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_result_voice.rst
######################
InlineQueryResultVoice
######################


.. automodule:: aiogram.types.inline_query_result_voice
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/inline_query_results_button.rst
########################
InlineQueryResultsButton
########################


.. automodule:: aiogram.types.inline_query_results_button
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_contact_message_content.rst
##########################
InputContactMessageContent
##########################


.. automodule:: aiogram.types.input_contact_message_content
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_file.rst
#########
InputFile
#########


.. automodule:: aiogram.types.input_file
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_invoice_message_content.rst
##########################
InputInvoiceMessageContent
##########################


.. automodule:: aiogram.types.input_invoice_message_content
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_location_message_content.rst
###########################
InputLocationMessageContent
###########################


.. automodule:: aiogram.types.input_location_message_content
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_media.rst
##########
InputMedia
##########


.. automodule:: aiogram.types.input_media
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_media_animation.rst
###################
InputMediaAnimation
###################


.. automodule:: aiogram.types.input_media_animation
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_media_audio.rst
###############
InputMediaAudio
###############


.. automodule:: aiogram.types.input_media_audio
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_media_document.rst
##################
InputMediaDocument
##################


.. automodule:: aiogram.types.input_media_document
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_media_photo.rst
###############
InputMediaPhoto
###############


.. automodule:: aiogram.types.input_media_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_media_video.rst
###############
InputMediaVideo
###############


.. automodule:: aiogram.types.input_media_video
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_message_content.rst
###################
InputMessageContent
###################


.. automodule:: aiogram.types.input_message_content
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_paid_media.rst
##############
InputPaidMedia
##############


.. automodule:: aiogram.types.input_paid_media
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_paid_media_photo.rst
###################
InputPaidMediaPhoto
###################


.. automodule:: aiogram.types.input_paid_media_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_paid_media_video.rst
###################
InputPaidMediaVideo
###################


.. automodule:: aiogram.types.input_paid_media_video
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_poll_option.rst
###############
InputPollOption
###############


.. automodule:: aiogram.types.input_poll_option
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_profile_photo.rst
#################
InputProfilePhoto
#################


.. automodule:: aiogram.types.input_profile_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_profile_photo_animated.rst
#########################
InputProfilePhotoAnimated
#########################


.. automodule:: aiogram.types.input_profile_photo_animated
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_profile_photo_static.rst
#######################
InputProfilePhotoStatic
#######################


.. automodule:: aiogram.types.input_profile_photo_static
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_sticker.rst
############
InputSticker
############


.. automodule:: aiogram.types.input_sticker
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_story_content.rst
#################
InputStoryContent
#################


.. automodule:: aiogram.types.input_story_content
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_story_content_photo.rst
######################
InputStoryContentPhoto
######################


.. automodule:: aiogram.types.input_story_content_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_story_content_video.rst
######################
InputStoryContentVideo
######################


.. automodule:: aiogram.types.input_story_content_video
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_text_message_content.rst
#######################
InputTextMessageContent
#######################


.. automodule:: aiogram.types.input_text_message_content
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/input_venue_message_content.rst
########################
InputVenueMessageContent
########################


.. automodule:: aiogram.types.input_venue_message_content
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/invoice.rst
#######
Invoice
#######


.. automodule:: aiogram.types.invoice
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/keyboard_button.rst
##############
KeyboardButton
##############


.. automodule:: aiogram.types.keyboard_button
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/keyboard_button_poll_type.rst
######################
KeyboardButtonPollType
######################


.. automodule:: aiogram.types.keyboard_button_poll_type
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/keyboard_button_request_chat.rst
#########################
KeyboardButtonRequestChat
#########################


.. automodule:: aiogram.types.keyboard_button_request_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/keyboard_button_request_user.rst
#########################
KeyboardButtonRequestUser
#########################


.. automodule:: aiogram.types.keyboard_button_request_user
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/keyboard_button_request_users.rst
##########################
KeyboardButtonRequestUsers
##########################


.. automodule:: aiogram.types.keyboard_button_request_users
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/labeled_price.rst
############
LabeledPrice
############


.. automodule:: aiogram.types.labeled_price
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/link_preview_options.rst
##################
LinkPreviewOptions
##################


.. automodule:: aiogram.types.link_preview_options
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/location.rst
########
Location
########


.. automodule:: aiogram.types.location
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/location_address.rst
###############
LocationAddress
###############


.. automodule:: aiogram.types.location_address
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/login_url.rst
########
LoginUrl
########


.. automodule:: aiogram.types.login_url
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/mask_position.rst
############
MaskPosition
############


.. automodule:: aiogram.types.mask_position
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/maybe_inaccessible_message.rst
########################
MaybeInaccessibleMessage
########################


.. automodule:: aiogram.types.maybe_inaccessible_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/menu_button.rst
##########
MenuButton
##########


.. automodule:: aiogram.types.menu_button
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/menu_button_commands.rst
##################
MenuButtonCommands
##################


.. automodule:: aiogram.types.menu_button_commands
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/menu_button_default.rst
#################
MenuButtonDefault
#################


.. automodule:: aiogram.types.menu_button_default
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/menu_button_web_app.rst
################
MenuButtonWebApp
################


.. automodule:: aiogram.types.menu_button_web_app
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message.rst
#######
Message
#######


.. automodule:: aiogram.types.message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_auto_delete_timer_changed.rst
#############################
MessageAutoDeleteTimerChanged
#############################


.. automodule:: aiogram.types.message_auto_delete_timer_changed
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_entity.rst
#############
MessageEntity
#############


.. automodule:: aiogram.types.message_entity
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_id.rst
#########
MessageId
#########


.. automodule:: aiogram.types.message_id
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_origin.rst
#############
MessageOrigin
#############


.. automodule:: aiogram.types.message_origin
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_origin_channel.rst
####################
MessageOriginChannel
####################


.. automodule:: aiogram.types.message_origin_channel
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_origin_chat.rst
#################
MessageOriginChat
#################


.. automodule:: aiogram.types.message_origin_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_origin_hidden_user.rst
#######################
MessageOriginHiddenUser
#######################


.. automodule:: aiogram.types.message_origin_hidden_user
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_origin_user.rst
#################
MessageOriginUser
#################


.. automodule:: aiogram.types.message_origin_user
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_reaction_count_updated.rst
###########################
MessageReactionCountUpdated
###########################


.. automodule:: aiogram.types.message_reaction_count_updated
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/message_reaction_updated.rst
######################
MessageReactionUpdated
######################


.. automodule:: aiogram.types.message_reaction_updated
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/order_info.rst
#########
OrderInfo
#########


.. automodule:: aiogram.types.order_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/owned_gift.rst
#########
OwnedGift
#########


.. automodule:: aiogram.types.owned_gift
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/owned_gift_regular.rst
################
OwnedGiftRegular
################


.. automodule:: aiogram.types.owned_gift_regular
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/owned_gift_unique.rst
###############
OwnedGiftUnique
###############


.. automodule:: aiogram.types.owned_gift_unique
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/owned_gifts.rst
##########
OwnedGifts
##########


.. automodule:: aiogram.types.owned_gifts
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/paid_media.rst
#########
PaidMedia
#########


.. automodule:: aiogram.types.paid_media
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/paid_media_info.rst
#############
PaidMediaInfo
#############


.. automodule:: aiogram.types.paid_media_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/paid_media_photo.rst
##############
PaidMediaPhoto
##############


.. automodule:: aiogram.types.paid_media_photo
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/paid_media_preview.rst
################
PaidMediaPreview
################


.. automodule:: aiogram.types.paid_media_preview
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/paid_media_purchased.rst
##################
PaidMediaPurchased
##################


.. automodule:: aiogram.types.paid_media_purchased
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/paid_media_video.rst
##############
PaidMediaVideo
##############


.. automodule:: aiogram.types.paid_media_video
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/paid_message_price_changed.rst
#######################
PaidMessagePriceChanged
#######################


.. automodule:: aiogram.types.paid_message_price_changed
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_data.rst
############
PassportData
############


.. automodule:: aiogram.types.passport_data
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error.rst
####################
PassportElementError
####################


.. automodule:: aiogram.types.passport_element_error
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error_data_field.rst
#############################
PassportElementErrorDataField
#############################


.. automodule:: aiogram.types.passport_element_error_data_field
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error_file.rst
########################
PassportElementErrorFile
########################


.. automodule:: aiogram.types.passport_element_error_file
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error_files.rst
#########################
PassportElementErrorFiles
#########################


.. automodule:: aiogram.types.passport_element_error_files
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error_front_side.rst
#############################
PassportElementErrorFrontSide
#############################


.. automodule:: aiogram.types.passport_element_error_front_side
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error_reverse_side.rst
###############################
PassportElementErrorReverseSide
###############################


.. automodule:: aiogram.types.passport_element_error_reverse_side
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error_selfie.rst
##########################
PassportElementErrorSelfie
##########################


.. automodule:: aiogram.types.passport_element_error_selfie
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error_translation_file.rst
###################################
PassportElementErrorTranslationFile
###################################


.. automodule:: aiogram.types.passport_element_error_translation_file
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error_translation_files.rst
####################################
PassportElementErrorTranslationFiles
####################################


.. automodule:: aiogram.types.passport_element_error_translation_files
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_element_error_unspecified.rst
###############################
PassportElementErrorUnspecified
###############################


.. automodule:: aiogram.types.passport_element_error_unspecified
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/passport_file.rst
############
PassportFile
############


.. automodule:: aiogram.types.passport_file
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/photo_size.rst
#########
PhotoSize
#########


.. automodule:: aiogram.types.photo_size
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/poll.rst
####
Poll
####


.. automodule:: aiogram.types.poll
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/poll_answer.rst
##########
PollAnswer
##########


.. automodule:: aiogram.types.poll_answer
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/poll_option.rst
##########
PollOption
##########


.. automodule:: aiogram.types.poll_option
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/pre_checkout_query.rst
################
PreCheckoutQuery
################


.. automodule:: aiogram.types.pre_checkout_query
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/prepared_inline_message.rst
#####################
PreparedInlineMessage
#####################


.. automodule:: aiogram.types.prepared_inline_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/proximity_alert_triggered.rst
#######################
ProximityAlertTriggered
#######################


.. automodule:: aiogram.types.proximity_alert_triggered
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/reaction_count.rst
#############
ReactionCount
#############


.. automodule:: aiogram.types.reaction_count
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/reaction_type.rst
############
ReactionType
############


.. automodule:: aiogram.types.reaction_type
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/reaction_type_custom_emoji.rst
#######################
ReactionTypeCustomEmoji
#######################


.. automodule:: aiogram.types.reaction_type_custom_emoji
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/reaction_type_emoji.rst
#################
ReactionTypeEmoji
#################


.. automodule:: aiogram.types.reaction_type_emoji
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/reaction_type_paid.rst
################
ReactionTypePaid
################


.. automodule:: aiogram.types.reaction_type_paid
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/refunded_payment.rst
###############
RefundedPayment
###############


.. automodule:: aiogram.types.refunded_payment
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/reply_keyboard_markup.rst
###################
ReplyKeyboardMarkup
###################


.. automodule:: aiogram.types.reply_keyboard_markup
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/reply_keyboard_remove.rst
###################
ReplyKeyboardRemove
###################


.. automodule:: aiogram.types.reply_keyboard_remove
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/reply_parameters.rst
###############
ReplyParameters
###############


.. automodule:: aiogram.types.reply_parameters
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/response_parameters.rst
##################
ResponseParameters
##################


.. automodule:: aiogram.types.response_parameters
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/revenue_withdrawal_state.rst
######################
RevenueWithdrawalState
######################


.. automodule:: aiogram.types.revenue_withdrawal_state
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/revenue_withdrawal_state_failed.rst
############################
RevenueWithdrawalStateFailed
############################


.. automodule:: aiogram.types.revenue_withdrawal_state_failed
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/revenue_withdrawal_state_pending.rst
#############################
RevenueWithdrawalStatePending
#############################


.. automodule:: aiogram.types.revenue_withdrawal_state_pending
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/revenue_withdrawal_state_succeeded.rst
###############################
RevenueWithdrawalStateSucceeded
###############################


.. automodule:: aiogram.types.revenue_withdrawal_state_succeeded
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/sent_web_app_message.rst
#################
SentWebAppMessage
#################


.. automodule:: aiogram.types.sent_web_app_message
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/shared_user.rst
##########
SharedUser
##########


.. automodule:: aiogram.types.shared_user
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/shipping_address.rst
###############
ShippingAddress
###############


.. automodule:: aiogram.types.shipping_address
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/shipping_option.rst
##############
ShippingOption
##############


.. automodule:: aiogram.types.shipping_option
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/shipping_query.rst
#############
ShippingQuery
#############


.. automodule:: aiogram.types.shipping_query
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/star_amount.rst
##########
StarAmount
##########


.. automodule:: aiogram.types.star_amount
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/star_transaction.rst
###############
StarTransaction
###############


.. automodule:: aiogram.types.star_transaction
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/star_transactions.rst
################
StarTransactions
################


.. automodule:: aiogram.types.star_transactions
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/sticker.rst
#######
Sticker
#######


.. automodule:: aiogram.types.sticker
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/sticker_set.rst
##########
StickerSet
##########


.. automodule:: aiogram.types.sticker_set
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/story.rst
#####
Story
#####


.. automodule:: aiogram.types.story
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/story_area.rst
#########
StoryArea
#########


.. automodule:: aiogram.types.story_area
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/story_area_position.rst
#################
StoryAreaPosition
#################


.. automodule:: aiogram.types.story_area_position
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/story_area_type.rst
#############
StoryAreaType
#############


.. automodule:: aiogram.types.story_area_type
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/story_area_type_link.rst
#################
StoryAreaTypeLink
#################


.. automodule:: aiogram.types.story_area_type_link
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/story_area_type_location.rst
#####################
StoryAreaTypeLocation
#####################


.. automodule:: aiogram.types.story_area_type_location
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/story_area_type_suggested_reaction.rst
##############################
StoryAreaTypeSuggestedReaction
##############################


.. automodule:: aiogram.types.story_area_type_suggested_reaction
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/story_area_type_unique_gift.rst
#######################
StoryAreaTypeUniqueGift
#######################


.. automodule:: aiogram.types.story_area_type_unique_gift
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/story_area_type_weather.rst
####################
StoryAreaTypeWeather
####################


.. automodule:: aiogram.types.story_area_type_weather
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/successful_payment.rst
#################
SuccessfulPayment
#################


.. automodule:: aiogram.types.successful_payment
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/switch_inline_query_chosen_chat.rst
###########################
SwitchInlineQueryChosenChat
###########################


.. automodule:: aiogram.types.switch_inline_query_chosen_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/text_quote.rst
#########
TextQuote
#########


.. automodule:: aiogram.types.text_quote
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/transaction_partner.rst
##################
TransactionPartner
##################


.. automodule:: aiogram.types.transaction_partner
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/transaction_partner_affiliate_program.rst
##################################
TransactionPartnerAffiliateProgram
##################################


.. automodule:: aiogram.types.transaction_partner_affiliate_program
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/transaction_partner_chat.rst
######################
TransactionPartnerChat
######################


.. automodule:: aiogram.types.transaction_partner_chat
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/transaction_partner_fragment.rst
##########################
TransactionPartnerFragment
##########################


.. automodule:: aiogram.types.transaction_partner_fragment
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/transaction_partner_other.rst
#######################
TransactionPartnerOther
#######################


.. automodule:: aiogram.types.transaction_partner_other
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/transaction_partner_telegram_ads.rst
#############################
TransactionPartnerTelegramAds
#############################


.. automodule:: aiogram.types.transaction_partner_telegram_ads
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/transaction_partner_telegram_api.rst
#############################
TransactionPartnerTelegramApi
#############################


.. automodule:: aiogram.types.transaction_partner_telegram_api
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/transaction_partner_user.rst
######################
TransactionPartnerUser
######################


.. automodule:: aiogram.types.transaction_partner_user
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/unique_gift.rst
##########
UniqueGift
##########


.. automodule:: aiogram.types.unique_gift
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/unique_gift_backdrop.rst
##################
UniqueGiftBackdrop
##################


.. automodule:: aiogram.types.unique_gift_backdrop
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/unique_gift_backdrop_colors.rst
########################
UniqueGiftBackdropColors
########################


.. automodule:: aiogram.types.unique_gift_backdrop_colors
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/unique_gift_info.rst
##############
UniqueGiftInfo
##############


.. automodule:: aiogram.types.unique_gift_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/unique_gift_model.rst
###############
UniqueGiftModel
###############


.. automodule:: aiogram.types.unique_gift_model
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/unique_gift_symbol.rst
################
UniqueGiftSymbol
################


.. automodule:: aiogram.types.unique_gift_symbol
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/update.rst
######
Update
######


.. automodule:: aiogram.types.update
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/user.rst
####
User
####


.. automodule:: aiogram.types.user
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/user_chat_boosts.rst
##############
UserChatBoosts
##############


.. automodule:: aiogram.types.user_chat_boosts
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/user_profile_photos.rst
#################
UserProfilePhotos
#################


.. automodule:: aiogram.types.user_profile_photos
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/user_shared.rst
##########
UserShared
##########


.. automodule:: aiogram.types.user_shared
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/users_shared.rst
###########
UsersShared
###########


.. automodule:: aiogram.types.users_shared
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/venue.rst
#####
Venue
#####


.. automodule:: aiogram.types.venue
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/video.rst
#####
Video
#####


.. automodule:: aiogram.types.video
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/video_chat_ended.rst
##############
VideoChatEnded
##############


.. automodule:: aiogram.types.video_chat_ended
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/video_chat_participants_invited.rst
############################
VideoChatParticipantsInvited
############################


.. automodule:: aiogram.types.video_chat_participants_invited
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/video_chat_scheduled.rst
##################
VideoChatScheduled
##################


.. automodule:: aiogram.types.video_chat_scheduled
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/video_chat_started.rst
################
VideoChatStarted
################


.. automodule:: aiogram.types.video_chat_started
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/video_note.rst
#########
VideoNote
#########


.. automodule:: aiogram.types.video_note
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/voice.rst
#####
Voice
#####


.. automodule:: aiogram.types.voice
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/web_app_data.rst
##########
WebAppData
##########


.. automodule:: aiogram.types.web_app_data
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/web_app_info.rst
##########
WebAppInfo
##########


.. automodule:: aiogram.types.web_app_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/webhook_info.rst
###########
WebhookInfo
###########


.. automodule:: aiogram.types.webhook_info
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/types/write_access_allowed.rst
##################
WriteAccessAllowed
##################


.. automodule:: aiogram.types.write_access_allowed
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

File: api/upload_file.rst
.. _sending-files:

###################
How to upload file?
###################

As says `official Telegram Bot API documentation <https://core.telegram.org/bots/api#sending-files>`_
there are three ways to send files (photos, stickers, audio, media, etc.):

If the file is already stored somewhere on the Telegram servers or file is available by the URL,
you don't need to reupload it.

But if you need to upload a new file just use subclasses of `InputFile <types/input_file.html>`__.

Here are the three different available builtin types of input file:

- :class:`aiogram.types.input_file.FSInputFile` - `uploading from file system <#upload-from-file-system>`__
- :class:`aiogram.types.input_file.BufferedInputFile` - `uploading from buffer <#upload-from-buffer>`__
- :class:`aiogram.types.input_file.URLInputFile` - `uploading from URL <#upload-from-url>`__

.. warning::

    **Be respectful to Telegram**

    Instances of `InputFile` are reusable.
    That means you can create an instance of InputFile and send it multiple times. However, Telegram does not recommend doing this. Instead, once you upload a file, save its `file_id` and reuse that later.

Upload from file system
=======================

By first step you will need to import InputFile wrapper:

.. code-block::

    from aiogram.types import FSInputFile

Then you can use it:

.. code-block::

    cat = FSInputFile("cat.png")
    agenda = FSInputFile("my-document.pdf", filename="agenda-2019-11-19.pdf")


.. autoclass:: aiogram.types.input_file.FSInputFile
    :members: __init__


Upload from buffer
==================

Files can be also passed from buffer
(For example you generate image using `Pillow <https://pillow.readthedocs.io/en/stable/>`_
and you want to send it to Telegram):

Import wrapper:

.. code-block::

    from aiogram.types import BufferedInputFile

And then you can use it:

.. code-block::

    text_file = BufferedInputFile(b"Hello, world!", filename="file.txt")

.. autoclass:: aiogram.types.input_file.BufferedInputFile
    :members: __init__

Upload from url
===============

If you need to upload a file from another server, but the direct link is bound to your server's IP,
or you want to bypass native `upload limits <https://core.telegram.org/bots/api#sending-files>`_
by URL, you can use :obj:`aiogram.types.input_file.URLInputFile`.

Import wrapper:

.. code-block::

    from aiogram.types import URLInputFile

And then you can use it:

.. code-block::

    image = URLInputFile(
        "https://www.python.org/static/community_logos/python-powered-h-140x182.png",
        filename="python-logo.png"
    )

.. autoclass:: aiogram.types.input_file.URLInputFile
    :members:

File: changelog.rst
.. _aiogram_changes:

.. include:: ../CHANGES.rst

.. include:: ../HISTORY.rst

File: dispatcher/class_based_handlers/base.rst
.. _cbh-base-handler:

===========
BaseHandler
===========

Base handler is generic abstract class and should be used in all other class-based handlers.

Import: :code:`from aiogram.handlers import BaseHandler`

By default you will need to override only method :code:`async def handle(self) -> Any: ...`

This class also has a default initializer and you don't need to change it.
The initializer accepts the incoming event and all contextual data, which
can be accessed from the handler through attributes: :code:`event: TelegramEvent` and :code:`data: Dict[str, Any]`

If an instance of the bot is specified in context data or current context it can be accessed through *bot* class attribute.

Example
=======

.. code-block:: python

    class MyHandler(BaseHandler[Message]):
        async def handle(self) -> Any:
             await self.event.answer("Hello!")

File: dispatcher/class_based_handlers/callback_query.rst
####################
CallbackQueryHandler
####################


.. automodule:: aiogram.handlers.callback_query
    :members:
    :member-order: bysource
    :undoc-members: True

File: dispatcher/class_based_handlers/chat_member.rst
=================
ChatMemberHandler
=================

There is base class for chat member updated events.

Simple usage
============

.. code-block:: python

    from aiogram.handlers import ChatMemberHandler

    ...

    @router.chat_member()
    @router.my_chat_member()
    class MyHandler(ChatMemberHandler):
        async def handle(self) -> Any: ...


Extension
=========

This base handler is subclass of :ref:`BaseHandler <cbh-base-handler>` with some extensions:

- :code:`self.chat` is alias for :code:`self.event.chat`

File: dispatcher/class_based_handlers/chosen_inline_result.rst
=========================
ChosenInlineResultHandler
=========================

There is base class for chosen inline result handlers.

Simple usage
============

.. code-block:: python

    from aiogram.handlers import ChosenInlineResultHandler

    ...

    @router.chosen_inline_result()
    class MyHandler(ChosenInlineResultHandler):
        async def handle(self) -> Any: ...


Extension
=========

This base handler is subclass of :ref:`BaseHandler <cbh-base-handler>` with some extensions:

- :code:`self.chat` is alias for :code:`self.event.chat`
- :code:`self.from_user` is alias for :code:`self.event.from_user`

File: dispatcher/class_based_handlers/error.rst
============
ErrorHandler
============

There is base class for error handlers.

Simple usage
============


.. code-block:: python

    from aiogram.handlers import ErrorHandler

    ...

    @router.errors()
    class MyHandler(ErrorHandler):
        async def handle(self) -> Any:
            log.exception(
                "Cause unexpected exception %s: %s",
                self.exception_name,
                self.exception_message
            )

Extension
=========

This base handler is subclass of :ref:`BaseHandler <cbh-base-handler>` with some extensions:

- :code:`self.exception_name` is alias for :code:`self.event.__class__.__name__`
- :code:`self.exception_message` is alias for :code:`str(self.event)`

File: dispatcher/class_based_handlers/index.rst
====================
Class based handlers
====================

A handler is a async callable which takes a event with contextual data and returns a response.

In **aiogram** it can be more than just an async function, these allow you to use classes
which can be used as Telegram event handlers to structure your event handlers and reuse code by harnessing inheritance and mixins.

There are some base class based handlers what you need to use in your own handlers:

.. toctree::

    base
    callback_query
    chosen_inline_result
    error
    inline_query
    message
    poll
    pre_checkout_query
    shipping_query
    chat_member

File: dispatcher/class_based_handlers/inline_query.rst
==================
InlineQueryHandler
==================

There is base class for inline query handlers.

Simple usage
============

.. code-block:: python

    from aiogram.handlers import InlineQueryHandler

    ...

    @router.inline_query()
    class MyHandler(InlineQueryHandler):
        async def handle(self) -> Any: ...


Extension
=========

This base handler is subclass of :ref:`BaseHandler <cbh-base-handler>` with some extensions:

- :code:`self.chat` is alias for :code:`self.event.chat`
- :code:`self.query` is alias for :code:`self.event.query`

File: dispatcher/class_based_handlers/message.rst
==============
MessageHandler
==============

There is base class for message handlers.

Simple usage
============

.. code-block:: python

    from aiogram.handlers import MessageHandler

    ...

    @router.message()
    class MyHandler(MessageHandler):
        async def handle(self) -> Any:
            return SendMessage(chat_id=self.chat.id, text="PASS")

Extension
=========

This base handler is subclass of :ref:`BaseHandler <cbh-base-handler>` with some extensions:

- :code:`self.chat` is alias for :code:`self.event.chat`
- :code:`self.from_user` is alias for :code:`self.event.from_user`

File: dispatcher/class_based_handlers/poll.rst
===========
PollHandler
===========

There is base class for poll handlers.

Simple usage
============

.. code-block:: python

    from aiogram.handlers import PollHandler

    ...

    @router.poll()
    class MyHandler(PollHandler):
        async def handle(self) -> Any: ...

Extension
=========

This base handler is subclass of :ref:`BaseHandler <cbh-base-handler>` with some extensions:

- :code:`self.question` is alias for :code:`self.event.question`
- :code:`self.options` is alias for :code:`self.event.options`

File: dispatcher/class_based_handlers/pre_checkout_query.rst
=======================
PreCheckoutQueryHandler
=======================

There is base class for callback query handlers.

Simple usage
============

.. code-block:: python

    from aiogram.handlers import PreCheckoutQueryHandler

    ...

    @router.pre_checkout_query()
    class MyHandler(PreCheckoutQueryHandler):
        async def handle(self) -> Any: ...

Extension
=========

This base handler is subclass of :ref:`BaseHandler <cbh-base-handler>` with some extensions:

- :code:`self.from_user` is alias for :code:`self.event.from_user`

File: dispatcher/class_based_handlers/shipping_query.rst
====================
ShippingQueryHandler
====================

There is base class for callback query handlers.

Simple usage
============

.. code-block:: python

    from aiogram.handlers import ShippingQueryHandler

    ...

    @router.shipping_query()
    class MyHandler(ShippingQueryHandler):
        async def handle(self) -> Any: ...

Extension
=========

This base handler is subclass of :ref:`BaseHandler <cbh-base-handler>` with some extensions:

- :code:`self.from_user` is alias for :code:`self.event.from_user`

File: dispatcher/dependency_injection.rst
####################
Dependency injection
####################

Dependency injection is a programming technique that makes a class independent of its dependencies.
It achieves that by decoupling the usage of an object from its creation.
This helps you to follow `SOLID's <https://en.wikipedia.org/wiki/SOLID>`_ dependency
inversion and single responsibility principles.


How it works in aiogram
=======================

For each update :class:`aiogram.dispatcher.dispatcher.Dispatcher` passes handling context data.
Filters and middleware can also make changes to the context.

To access contextual data you should specify corresponding keyword parameter in handler or filter.
For example, to get :class:`aiogram.fsm.context.FSMContext` we do it like that:

.. code-block:: python

    @router.message(ProfileCompletion.add_photo, F.photo)
    async def add_photo(
        message: types.Message, bot: Bot, state: FSMContext
    ) -> Any:
        ... # do something with photo


Injecting own dependencies
==========================

Aiogram provides several ways to complement / modify contextual data.

The first and easiest way is to simply specify the named arguments in
:class:`aiogram.dispatcher.dispatcher.Dispatcher` initialization, polling start methods
or :class:`aiogram.webhook.aiohttp_server.SimpleRequestHandler` initialization if you use webhooks.

.. code-block:: python

    async def main() -> None:
        dp = Dispatcher(..., foo=42)
        return await dp.start_polling(
            bot, bar="Bazz"
        )

Analogy for webhook:

.. code-block:: python

    async def main() -> None:
        dp = Dispatcher(..., foo=42)
        handler = SimpleRequestHandler(dispatcher=dp, bot=bot, bar="Bazz")
        ... # starting webhook

:class:`aiogram.dispatcher.dispatcher.Dispatcher`'s workflow data also can be supplemented
by setting values as in a dictionary:

.. code-block:: python

    dp = Dispatcher(...)
    dp["eggs"] = Spam()

The middlewares updates the context quite often.
You can read more about them on this page:

- :ref:`Middlewares <middlewares>`

The last way is to return a dictionary from the filter:

.. literalinclude:: ../../examples/context_addition_from_filter.py

...or using :ref:`MagicFilter <magic-filters>` with :code:`.as_(...)` method.


Using type hints
================

.. note::

    Type-hinting middleware data is optional and is not required for the correct operation of the dispatcher.
    However, it is recommended to use it to improve the readability of the code.

You can use type hints to specify the type of the context data in the middlewares, filters and handlers.

The default middleware data typed dict can be found in :class:`aiogram.dispatcher.middlewares.data.MiddlewareData`.

In case when you have extended the context data, you can use the :class:`aiogram.dispatcher.middlewares.data.MiddlewareData` as a base class and specify the type hints for the new fields.

.. warning::

    If you using type checking tools like mypy, you can experience warnings about that this type hint against Liskov substitution principle in due stricter type is not a subclass of :code:`dict[str, Any]`.
    This is a known issue and it is not a bug. You can ignore this warning or use :code:`# type: ignore` comment.

Example of using type hints:

.. code-block:: python

    from aiogram.dispatcher.middlewares.data import MiddlewareData


    class MyMiddlewareData(MiddlewareData, total=False):
        my_custom_value: int


    class MyMessageMiddleware(BaseMiddleware):
        async def __call__(
            self,
            handler: Callable[[Message, MyMiddlewareData], Awaitable[Any]],
            event: Message,
            data: MyMiddlewareData,
        ) -> Any:
            bot = data["bot"]  # <-- IDE will show you that data has `bot` key and its type is `Bot`

            data["my_custom_value"] = bot.id * 42  # <-- IDE will show you that you can set `my_custom_value` key with int value and warn you if you try to set it with other type
            return await handler(event, data)


Available context data type helpers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: aiogram.dispatcher.middlewares.data.MiddlewareData
    :members:
    :undoc-members:
    :member-order: bysource


.. autoclass:: aiogram.dispatcher.middlewares.data.I18nData
    :members:
    :undoc-members:
    :member-order: bysource

File: dispatcher/dispatcher.rst
##########
Dispatcher
##########

Dispatcher is root :class:`~aiogram.dispatcher.router.Router` and in code Dispatcher can be used directly for routing updates or attach another routers into dispatcher.

Here is only listed base information about Dispatcher. All about writing handlers, filters and etc. you can find in next pages:

- :ref:`Router <Router>`
- :ref:`Filtering events`


.. autoclass:: aiogram.dispatcher.dispatcher.Dispatcher
    :members: __init__, feed_update, feed_raw_update, feed_webhook_update, start_polling, run_polling, stop_polling


Simple usage
============

Example:

.. code-block:: python

    dp = Dispatcher()

    @dp.message()
    async def message_handler(message: types.Message) -> None:
        await SendMessage(chat_id=message.from_user.id, text=message.text)


Including routers

Example:


.. code-block:: python

    dp = Dispatcher()
    router1 = Router()
    dp.include_router(router1)


.. _Handling updates:

Handling updates
================

All updates can be propagated to the dispatcher by :meth:`~aiogram.dispatcher.dispatcher.Dispatcher.feed_update` method:

.. code-block:: python

  from aiogram import Bot, Dispatcher

  async def update_handler(update: Update, bot: Bot, dispatcher: Dispatcher):
    result = await dp.feed_update(bot, update)

Also you can feed raw update (dictionary) object to the dispatcher by :meth:`~aiogram.dispatcher.dispatcher.Dispatcher.feed_raw_update` method:

.. code-block:: python

  from aiogram import Bot, Dispatcher

  async def update_handler(raw_update: dict[str, Any], bot: Bot, dispatcher: Dispatcher):
    result = await dp.feed_raw_update(bot, raw_update)

File: dispatcher/errors.rst
######
Errors
######


Handling errors
===============

Is recommended way that you should use errors inside handlers using try-except block,
but in common cases you can use global errors handler at router or dispatcher level.

If you specify errors handler for router - it will be used for all handlers inside this router.

If you specify errors handler for dispatcher - it will be used for all handlers inside all routers.

.. code-block:: python

    @router.error(ExceptionTypeFilter(MyCustomException), F.update.message.as_("message"))
    async def handle_my_custom_exception(event: ErrorEvent, message: Message):
        # do something with error
        await message.answer("Oops, something went wrong!")


    @router.error()
    async def error_handler(event: ErrorEvent):
        logger.critical("Critical error caused by %s", event.exception, exc_info=True)
        # do something with error
        ...


.. _error-event:

ErrorEvent
==========

.. automodule:: aiogram.types.error_event
    :members:
    :member-order: bysource
    :undoc-members: True
    :exclude-members: model_config,model_fields

.. _error-types:

Error types
===========

.. automodule:: aiogram.exceptions
    :members:
    :member-order: bysource

File: dispatcher/filters/callback_data.rst
.. _Callback data factory:

==============================
Callback Data Factory & Filter
==============================

.. autoclass:: aiogram.filters.callback_data.CallbackData
    :members:
    :member-order: bysource
    :undoc-members: False
    :exclude-members: model_config,model_fields

Usage
=====

Create subclass of :code:`CallbackData`:

.. code-block:: python

    class MyCallback(CallbackData, prefix="my"):
        foo: str
        bar: int

After that you can generate any callback based on this class, for example:

.. code-block:: python

    cb1 = MyCallback(foo="demo", bar=42)
    cb1.pack()  # returns 'my:demo:42'
    cb1.unpack('my:demo:42')  # returns <MyCallback(foo="demo", bar=42)>

So... Now you can use this class to generate any callbacks with defined structure

.. code-block:: python

    ...
    # Pass it into the markup
    InlineKeyboardButton(
        text="demo",
        callback_data=MyCallback(foo="demo", bar="42").pack()  # value should be packed to string
    )
    ...

... and handle by specific rules

.. code-block:: python

    # Filter callback by type and value of field :code:`foo`
    @router.callback_query(MyCallback.filter(F.foo == "demo"))
    async def my_callback_foo(query: CallbackQuery, callback_data: MyCallback):
        await query.answer(...)
        ...
        print("bar =", callback_data.bar)

Also can be used in :doc:`Keyboard builder </utils/keyboard>`:

.. code-block:: python

    builder = InlineKeyboardBuilder()
    builder.button(
        text="demo",
        callback_data=MyCallback(foo="demo", bar="42")  # Value can be not packed to string inplace, because builder knows what to do with callback instance
    )


Another abstract example:

.. code-block:: python

    class Action(str, Enum):
        ban = "ban"
        kick = "kick"
        warn = "warn"

    class AdminAction(CallbackData, prefix="adm"):
        action: Action
        chat_id: int
        user_id: int

    ...
    # Inside handler
    builder = InlineKeyboardBuilder()
    for action in Action:
        builder.button(
            text=action.value.title(),
            callback_data=AdminAction(action=action, chat_id=chat_id, user_id=user_id),
        )
    await bot.send_message(
        chat_id=admins_chat,
        text=f"What do you want to do with {html.quote(name)}",
        reply_markup=builder.as_markup(),
    )
    ...

    @router.callback_query(AdminAction.filter(F.action == Action.ban))
    async def ban_user(query: CallbackQuery, callback_data: AdminAction, bot: Bot):
        await bot.ban_chat_member(
            chat_id=callback_data.chat_id,
            user_id=callback_data.user_id,
            ...
        )

Known limitations
=================

Allowed types and their subclasses:

- :code:`str`
- :code:`int`
- :code:`bool`
- :code:`float`
- :code:`Decimal`  (:code:`from decimal import Decimal`)
- :code:`Fraction`  (:code:`from fractions import Fraction`)
- :code:`UUID` (:code:`from uuid import UUID`)
- :code:`Enum` (:code:`from enum import Enum`, only for string enums)
- :code:`IntEnum` (:code:`from enum import IntEnum`, only for int enums)


.. note::

    Note that the integer Enum's should be always is subclasses of :code:`IntEnum` in due to parsing issues.

File: dispatcher/filters/chat_member_updated.rst
=================
ChatMemberUpdated
=================

Usage
=====

Handle user leave or join events

.. code-block:: python

    from aiogram.filters import IS_MEMBER, IS_NOT_MEMBER

    @router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))
    async def on_user_leave(event: ChatMemberUpdated): ...

    @router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
    async def on_user_join(event: ChatMemberUpdated): ...

Or construct your own terms via using pre-defined set of statuses and transitions.


Explanation
===========

.. autoclass:: aiogram.filters.chat_member_updated.ChatMemberUpdatedFilter
    :members:
    :member-order: bysource
    :undoc-members: False

You can import from :code:`aiogram.filters` all available
variants of `statuses`_, `status groups`_ or `transitions`_:

Statuses
========

+-------------------------+--------------------------------------+
| name                    | Description                          |
+=========================+======================================+
| :code:`CREATOR`         | Chat owner                           |
+-------------------------+--------------------------------------+
| :code:`ADMINISTRATOR`   | Chat administrator                   |
+-------------------------+--------------------------------------+
| :code:`MEMBER`          | Member of the chat                   |
+-------------------------+--------------------------------------+
| :code:`RESTRICTED`      | Restricted user (can be not member)  |
+-------------------------+--------------------------------------+
| :code:`LEFT`            | Isn't member of the chat             |
+-------------------------+--------------------------------------+
| :code:`KICKED`          | Kicked member by administrators      |
+-------------------------+--------------------------------------+

Statuses can be extended with `is_member` flag by prefixing with
:code:`+` (for :code:`is_member == True)` or :code:`-` (for :code:`is_member == False`) symbol,
like :code:`+RESTRICTED` or :code:`-RESTRICTED`

Status groups
=============

The particular statuses can be combined via bitwise :code:`or` operator, like :code:`CREATOR | ADMINISTRATOR`

+-------------------------+-----------------------------------------------------------------------------------+
| name                    | Description                                                                       |
+=========================+===================================================================================+
| :code:`IS_MEMBER`       | Combination of :code:`(CREATOR | ADMINISTRATOR | MEMBER | +RESTRICTED)` statuses. |
+-------------------------+-----------------------------------------------------------------------------------+
| :code:`IS_ADMIN`        | Combination of :code:`(CREATOR | ADMINISTRATOR)` statuses.                        |
+-------------------------+-----------------------------------------------------------------------------------+
| :code:`IS_NOT_MEMBER`   | Combination of :code:`(LEFT | KICKED | -RESTRICTED)` statuses.                    |
+-------------------------+-----------------------------------------------------------------------------------+

Transitions
===========

Transitions can be defined via bitwise shift operators :code:`>>` and :code:`<<`.
Old chat member status should be defined in the left side for :code:`>>` operator (right side for :code:`<<`)
and new status should be specified on the right side for :code:`>>` operator (left side for :code:`<<`)

The direction of transition can be changed via bitwise inversion operator: :code:`~JOIN_TRANSITION`
will produce swap of old and new statuses.

+-----------------------------+-----------------------------------------------------------------------+
| name                        | Description                                                           |
+=============================+=======================================================================+
| :code:`JOIN_TRANSITION`     | Means status changed from :code:`IS_NOT_MEMBER` to :code:`IS_MEMBER`  |
|                             | (:code:`IS_NOT_MEMBER >> IS_MEMBER`)                                  |
+-----------------------------+-----------------------------------------------------------------------+
| :code:`LEAVE_TRANSITION`    | Means status changed from :code:`IS_MEMBER` to :code:`IS_NOT_MEMBER`  |
|                             | (:code:`~JOIN_TRANSITION`)                                            |
+-----------------------------+-----------------------------------------------------------------------+
| :code:`PROMOTED_TRANSITION` | Means status changed from                                             |
|                             | :code:`(MEMBER | RESTRICTED | LEFT | KICKED) >> ADMINISTRATOR`        |
|                             | (:code:`(MEMBER | RESTRICTED | LEFT | KICKED) >> ADMINISTRATOR`)      |
+-----------------------------+-----------------------------------------------------------------------+

.. note::

    Note that if you define the status unions (via :code:`|`) you will need to add brackets for the statement
    before use shift operator in due to operator priorities.


Allowed handlers
================

Allowed update types for this filter:

- `my_chat_member`
- `chat_member`

File: dispatcher/filters/command.rst
=======
Command
=======

Usage
=====

1. Filter single variant of commands: :code:`Command("start")`
2. Handle command by regexp pattern: :code:`Command(re.compile(r"item_(\\d+)"))`
3. Match command by multiple variants: :code:`Command("item", re.compile(r"item_(\\d+)"))`
4. Handle commands in public chats intended for other bots: :code:`Command("command", ignore_mention=True)`
5. Use :class:`aiogram.types.bot_command.BotCommand` object as command reference :code:`Command(BotCommand(command="command", description="My awesome command")`

.. warning::

    Command cannot include spaces or any whitespace


.. autoclass:: aiogram.filters.command.Command
    :members: __init__
    :member-order: bysource
    :undoc-members: False

When filter is passed the :class:`aiogram.filters.command.CommandObject` will be passed to the handler argument :code:`command`

.. autoclass:: aiogram.filters.command.CommandObject
    :members:
    :member-order: bysource
    :undoc-members: False

Allowed handlers
================

Allowed update types for this filter:

- `message`
- `edited_message`

File: dispatcher/filters/exception.rst
==========
Exceptions
==========

This filters can be helpful for handling errors from the text messages.

.. autoclass:: aiogram.filters.exception.ExceptionTypeFilter
    :members:
    :member-order: bysource
    :undoc-members: False

.. autoclass:: aiogram.filters.exception.ExceptionMessageFilter
    :members:
    :member-order: bysource
    :undoc-members: False

Allowed handlers
================

Allowed update types for this filters:

- :code:`error`

File: dispatcher/filters/index.rst
.. _Filtering events:

================
Filtering events
================

Filters is needed for routing updates to the specific handler.
Searching of handler is always stops on first match set of filters are pass.
By default, all handlers has empty set of filters, so all updates will be passed to first handler that has empty set of filters.

*aiogram* has some builtin useful filters or you can write own filters.

Builtin filters
===============

Here is list of builtin filters:

.. toctree::
    :maxdepth: 1

    command
    chat_member_updated
    magic_filters
    magic_data
    callback_data
    exception

Writing own filters
=========================

Filters can be:

- Asynchronous function (:code:`async def my_filter(*args, **kwargs): pass`)
- Synchronous function (:code:`def my_filter(*args, **kwargs): pass`)
- Anonymous function (:code:`lambda event: True`)
- Any awaitable object
- Subclass of :class:`aiogram.filters.base.Filter`
- Instances of :ref:`MagicFilter <magic-filters>`

and should return bool or dict.
If the dictionary is passed as result of filter - resulted data will be propagated to the next
filters and handler as keywords arguments.

Base class for own filters
--------------------------

.. autoclass:: aiogram.filters.base.Filter
    :members: __call__,update_handler_flags
    :member-order: bysource
    :undoc-members: False

Own filter example
------------------

For example if you need to make simple text filter:

.. literalinclude:: ../../../examples/own_filter.py

.. _combining-filters:

Combining Filters
=================

In general, all filters can be combined in two ways


Recommended way
---------------

If you specify multiple filters in a row, it will be checked with an "and" condition:

.. code-block:: python

    @<router>.message(F.text.startswith("show"), F.text.endswith("example"))


Also, if you want to use two alternative ways to run the same handler ("or" condition)
you can register the handler twice or more times as you like

.. code-block:: python

    @<router>.message(F.text == "hi")
    @<router>.message(CommandStart())


Also sometimes you will need to invert the filter result, for example you have an *IsAdmin* filter
and you want to check if the user is not an admin

.. code-block:: python

    @<router>.message(~IsAdmin())


Another possible way
--------------------

An alternative way is to combine using special functions (:func:`and_f`, :func:`or_f`, :func:`invert_f` from :code:`aiogram.filters` module):

.. code-block:: python

    and_f(F.text.startswith("show"), F.text.endswith("example"))
    or_f(F.text(text="hi"), CommandStart())
    invert_f(IsAdmin())
    and_f(<A>, or_f(<B>, <C>))

File: dispatcher/filters/magic_data.rst
=========
MagicData
=========

Usage
=====

#. :code:`MagicData(F.event.from_user.id == F.config.admin_id)`  (Note that :code:`config` should be passed from middleware)

Explanation
===========

.. autoclass:: aiogram.filters.magic_data.MagicData
    :members:
    :member-order: bysource
    :undoc-members: False

Can be imported:

- :code:`from aiogram.filters import MagicData`


Allowed handlers
================

Allowed update types for this filter:

- :code:`message`
- :code:`edited_message`
- :code:`channel_post`
- :code:`edited_channel_post`
- :code:`inline_query`
- :code:`chosen_inline_result`
- :code:`callback_query`
- :code:`shipping_query`
- :code:`pre_checkout_query`
- :code:`poll`
- :code:`poll_answer`
- :code:`my_chat_member`
- :code:`chat_member`
- :code:`chat_join_request`
- :code:`error`

File: dispatcher/filters/magic_filters.rst
.. _magic-filters:

=============
Magic filters
=============

.. note::

    This page still in progress. Has many incorrectly worded sentences.

Is external package maintained by *aiogram* core team.

By default installs with *aiogram* and also is available on `PyPi - magic-filter <https://pypi.org/project/magic-filter/>`_.
That's mean you can install it and use with any other libraries and in own projects without depending *aiogram* installed.

Usage
=====

The **magic_filter** package implements class shortly named :class:`magic_filter.F` that's mean :code:`F` can be imported from :code:`aiogram` or :code:`magic_filter`. :class:`F` is alias for :class:`MagicFilter`.

.. note::

    Note that *aiogram* has an small extension over magic-filter and if you want to use this extension you should import magic from *aiogram* instead of *magic_filter* package

The :class:`MagicFilter` object is callable, supports :ref:`some actions <magic-filter-possible-actions>`
and memorize the attributes chain and the action which should be checked on demand.

So that's mean you can chain attribute getters, describe simple data validations
and then call the resulted object passing single object as argument,
for example make attributes chain :code:`F.foo.bar.baz` then add
action ':code:`F.foo.bar.baz == 'spam'` and then call the resulted object - :code:`(F.foo.bar.baz == 'spam').resolve(obj)`

.. _magic-filter-possible-actions:

Possible actions
================

Magic filter object supports some of basic logical operations over object attributes

Exists or not None
------------------

Default actions.

.. code-block:: python

    F.photo  # lambda message: message.photo

Equals
------

.. code-block:: python

    F.text == 'hello'  # lambda message: message.text == 'hello'
    F.from_user.id == 42  # lambda message: message.from_user.id == 42
    F.text != 'spam'  # lambda message: message.text != 'spam'

Is one of
---------

Can be used as method named :code:`in_` or as matmul operator :code:`@` with any iterable

.. code-block:: python

    F.from_user.id.in_({42, 1000, 123123})  # lambda query: query.from_user.id in {42, 1000, 123123}
    F.data.in_({'foo', 'bar', 'baz'})  # lambda query: query.data in {'foo', 'bar', 'baz'}

Contains
--------

.. code-block:: python

    F.text.contains('foo')  # lambda message: 'foo' in message.text

String startswith/endswith
--------------------------

Can be applied only for text attributes

.. code-block:: python

    F.text.startswith('foo')  # lambda message: message.text.startswith('foo')
    F.text.endswith('bar')  # lambda message: message.text.startswith('bar')

Regexp
------

.. code-block:: python

    F.text.regexp(r'Hello, .+')  # lambda message: re.match(r'Hello, .+', message.text)

Custom function
---------------

Accepts any callable. Callback will be called when filter checks result

.. code-block:: python

    F.chat.func(lambda chat: chat.id == -42)  # lambda message: (lambda chat: chat.id == -42)(message.chat)

Inverting result
----------------

Any of available operation can be inverted by bitwise inversion - :code:`~`

.. code-block:: python

    ~F.text  # lambda message: not message.text
    ~F.text.startswith('spam')  # lambda message: not message.text.startswith('spam')

Combining
---------

All operations can be combined via bitwise and/or operators - :code:`&`/:code:`|`

.. code-block:: python

    (F.from_user.id == 42) & (F.text == 'admin')
    F.text.startswith('a') | F.text.endswith('b')
    (F.from_user.id.in_({42, 777, 911})) & (F.text.startswith('!') | F.text.startswith('/')) & F.text.contains('ban')


Attribute modifiers - string manipulations
------------------------------------------

Make text upper- or lower-case

Can be used only with string attributes.

.. code-block:: python

    F.text.lower() == 'test'  # lambda message: message.text.lower() == 'test'
    F.text.upper().in_({'FOO', 'BAR'})  # lambda message: message.text.upper() in {'FOO', 'BAR'}
    F.text.len() == 5  # lambda message: len(message.text) == 5


Get filter result as handler argument
-------------------------------------

This part is not available in *magic-filter* directly but can be used with *aiogram*

.. code-block:: python

    from aiogram import F

    ...

    @router.message(F.text.regexp(r"^(\d+)$").as_("digits"))
    async def any_digits_handler(message: Message, digits: Match[str]):
        await message.answer(html.quote(str(digits)))

Usage in *aiogram*
==================

.. code-block:: python

    @router.message(F.text == 'hello')
    @router.inline_query(F.data == 'button:1')
    @router.message(F.text.startswith('foo'))
    @router.message(F.content_type.in_({'text', 'sticker'}))
    @router.message(F.text.regexp(r'\d+'))

    ...

    # Many others cases when you will need to check any of available event attribute

File: dispatcher/finite_state_machine/index.rst
.. _Finite State Machine:

====================
Finite State Machine
====================

    A finite-state machine (FSM) or finite-state automaton (FSA, plural: automata), finite automaton,
    or simply a state machine, is a mathematical model of computation.

    It is an abstract machine that can be in exactly one of a finite number of states at any given time.
    The FSM can change from one state to another in response to some inputs;
    the change from one state to another is called a transition.

    An FSM is defined by a list of its states, its initial state,
    and the inputs that trigger each transition.

    .. raw:: html

        <hr>

    Source: `WikiPedia <wiki>`_

Usage example
=============

Not all functionality of the bot can be implemented as single handler,
for example you will need to collect some data from user in separated steps you will need to use FSM.


.. image:: ../../_static/fsm_example.png
    :alt: FSM Example

Let's see how to do that step-by-step

Step by step
------------

Before handle any states you will need to specify what kind of states you want to handle

.. literalinclude:: ../../../examples/finite_state_machine.py
    :pyobject: Form

And then write handler for each state separately from the start of dialog

Here is dialog can be started only via command :code:`/start`, so lets handle it and make transition user to state :code:`Form.name`

.. literalinclude:: ../../../examples/finite_state_machine.py
    :pyobject: command_start

After that you will need to save some data to the storage and make transition to next step.

.. literalinclude:: ../../../examples/finite_state_machine.py
    :pyobject: process_name

At the next steps user can make different answers, it can be `yes`, `no` or any other

Handle :code:`yes` and soon we need to handle :code:`Form.language` state

.. literalinclude:: ../../../examples/finite_state_machine.py
    :pyobject: process_like_write_bots

Handle :code:`no`

.. literalinclude:: ../../../examples/finite_state_machine.py
    :pyobject: process_dont_like_write_bots

And handle any other answers

.. literalinclude:: ../../../examples/finite_state_machine.py
    :pyobject: process_unknown_write_bots

All possible cases of `like_bots` step was covered, let's implement finally step

.. literalinclude:: ../../../examples/finite_state_machine.py
    :pyobject: process_language

.. literalinclude:: ../../../examples/finite_state_machine.py
    :pyobject: show_summary

And now you have covered all steps from the image, but you can make possibility to cancel conversation, lets do that via command or text

.. literalinclude:: ../../../examples/finite_state_machine.py
    :pyobject: cancel_handler

Complete example
----------------
.. literalinclude:: ../../../examples/finite_state_machine.py
    :language: python
    :linenos:


Read more
=========

.. toctree::

    storages
    strategy
    scene


.. _wiki: https://en.wikipedia.org/wiki/Finite-state_machine

File: dispatcher/finite_state_machine/scene.rst
.. _Scenes:

=============
Scenes Wizard
=============

.. versionadded:: 3.2

.. warning::

    This feature is experimental and may be changed in future versions.

**aiogram's** basics API is easy to use and powerful,
allowing the implementation of simple interactions such as triggering a command or message
for a response.
However, certain tasks require a dialogue between the user and the bot.
This is where Scenes come into play.

Understanding Scenes
====================

A Scene in **aiogram** is like an abstract, isolated namespace or room that a user can be
ushered into via the code. When a user is within a Scene, most other global commands or
message handlers are bypassed, unless they are specifically designed to function outside of the Scenes.
This helps in creating an experience of focused interactions.
Scenes provide a structure for more complex interactions,
effectively isolating and managing contexts for different stages of the conversation.
They allow you to control and manage the flow of the conversation in a more organized manner.

Scene Lifecycle
---------------

Each Scene can be "entered", "left" or "exited", allowing for clear transitions between different
stages of the conversation.
For instance, in a multi-step form filling interaction, each step could be a Scene -
the bot guides the user from one Scene to the next as they provide the required information.

Scene Listeners
---------------

Scenes have their own hooks which are command or message listeners that only act while
the user is within the Scene.
These hooks react to user actions while the user is 'inside' the Scene,
providing the responses or actions appropriate for that context.
When the user is ushered from one Scene to another, the actions and responses change
accordingly as the user is now interacting with the set of listeners inside the new Scene.
These 'Scene-specific' hooks or listeners, detached from the global listening context,
allow for more streamlined and organized bot-user interactions.


Scene Interactions
------------------

Each Scene is like a self-contained world, with interactions defined within the scope of that Scene.
As such, only the handlers defined within the specific Scene will react to user's input during
the lifecycle of that Scene.


Scene Benefits
--------------

Scenes can help manage more complex interaction workflows and enable more interactive and dynamic
dialogs between the user and the bot.
This offers great flexibility in handling multi-step interactions or conversations with the users.

How to use Scenes
=================

For example we have a quiz bot, which asks the user a series of questions and then displays the results.

Lets start with the data models, in this example simple data models are used to represent
the questions and answers, in real life you would probably use a database to store the data.

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :lines: 25-101
    :caption: Questions list

Then, we need to create a Scene class that will represent the quiz game scene:

.. note::

    Keyword argument passed into class definition describes the scene name - is the same as state of the scene.

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :pyobject: QuizScene
    :emphasize-lines: 1
    :lines: -7
    :caption: Quiz Scene


Also we need to define a handler that helps to start the quiz game:

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :caption: Start command handler
    :lines: 260-262

Once the scene is defined, we need to register it in the SceneRegistry:

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :pyobject: create_dispatcher
    :caption: Registering the scene

So, now we can implement the quiz game logic, each question is sent to the user one by one,
and the user's answer is checked at the end of all questions.

Now we need to write an entry point for the question handler:

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :caption: Question handler entry point
    :pyobject: QuizScene.on_enter


Once scene is entered, we should expect the user's answer, so we need to write a handler for it,
this handler should expect the text message, save the answer and retake
the question handler for the next question:

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :caption: Answer handler
    :pyobject: QuizScene.answer

When user answer with unknown message, we should expect the text message again:

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :caption: Unknown message handler
    :pyobject: QuizScene.unknown_message

When all questions are answered, we should show the results to the user, as you can see in the code below,
we use `await self.wizard.exit()` to exit from the scene when questions list is over in the `QuizScene.on_enter` handler.

Thats means that we need to write an exit handler to show the results to the user:

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :caption: Show results handler
    :pyobject: QuizScene.on_exit

Also we can implement a actions to exit from the quiz game or go back to the previous question:

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :caption: Exit handler
    :pyobject: QuizScene.exit

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :caption: Back handler
    :pyobject: QuizScene.back

Now we can run the bot and test the quiz game:

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :caption: Run the bot
    :lines: 291-

Complete them all

.. literalinclude:: ../../../examples/quiz_scene.py
    :language: python
    :caption: Quiz Example


Components
==========

- :class:`aiogram.fsm.scene.Scene` - represents a scene, contains handlers
- :class:`aiogram.fsm.scene.SceneRegistry` - container for all scenes in the bot, used to register scenes and resolve them by name
- :class:`aiogram.fsm.scene.ScenesManager` - manages scenes for each user, used to enter, leave and resolve current scene for user
- :class:`aiogram.fsm.scene.SceneConfig` - scene configuration, used to configure scene
- :class:`aiogram.fsm.scene.SceneWizard` - scene wizard, used to interact with user in scene from active scene handler
- Markers - marker for scene handlers, used to mark scene handlers


.. autoclass:: aiogram.fsm.scene.Scene
    :members:

.. autoclass:: aiogram.fsm.scene.SceneRegistry
    :members:

.. autoclass:: aiogram.fsm.scene.ScenesManager
    :members:

.. autoclass:: aiogram.fsm.scene.SceneConfig
    :members:

.. autoclass:: aiogram.fsm.scene.SceneWizard
    :members:

Markers
-------

Markers are similar to the Router event registering mechanism,
but they are used to mark scene handlers in the Scene class.

It can be imported from :code:`from aiogram.fsm.scene import on` and should be used as decorator.

Allowed event types:

- message
- edited_message
- channel_post
- edited_channel_post
- inline_query
- chosen_inline_result
- callback_query
- shipping_query
- pre_checkout_query
- poll
- poll_answer
- my_chat_member
- chat_member
- chat_join_request

Each event type can be filtered in the same way as in the Router.

Also each event type can be marked as scene entry point, exit point or leave point.

If you want to mark the scene can be entered from message or inline query,
you should use :code:`on.message` or :code:`on.inline_query` marker:

.. code-block:: python

    class MyScene(Scene, name="my_scene"):
        @on.message.enter()
        async def on_enter(self, message: types.Message):
            pass

        @on.callback_query.enter()
        async def on_enter(self, callback_query: types.CallbackQuery):
            pass


Scene has only three points for transitions:

- enter point - when user enters to the scene
- leave point - when user leaves the scene and the enter another scene
- exit point - when user exits from the scene

File: dispatcher/finite_state_machine/storages.rst
########
Storages
########

Storages out of the box
=======================

MemoryStorage
-------------

.. autoclass:: aiogram.fsm.storage.memory.MemoryStorage
    :members: __init__
    :member-order: bysource

RedisStorage
------------

.. autoclass:: aiogram.fsm.storage.redis.RedisStorage
    :members: __init__, from_url
    :member-order: bysource

MongoStorage
------------

.. autoclass:: aiogram.fsm.storage.mongo.MongoStorage
    :members: __init__, from_url
    :member-order: bysource

KeyBuilder
------------

Keys inside Redis and Mongo storages can be customized via key builders:

.. autoclass:: aiogram.fsm.storage.base.KeyBuilder
    :members:
    :member-order: bysource

.. autoclass:: aiogram.fsm.storage.base.DefaultKeyBuilder
    :members:
    :member-order: bysource


Writing own storages
====================

.. autoclass:: aiogram.fsm.storage.base.BaseStorage
    :members:
    :member-order: bysource

File: dispatcher/finite_state_machine/strategy.rst
========
Strategy
========

This module provides the `FSMStrategy` enumeration which is used to define the strategy of the finite state machine.


.. autoclass:: aiogram.fsm.strategy.FSMStrategy
    :members:

File: dispatcher/flags.rst
.. _flags:

=====
Flags
=====

Flags is a markers for handlers that can be used in `middlewares <#use-in-middlewares>`_
or special `utilities <#use-in-utilities>`_ to make classification of the handlers.

Flags can be added to the handler via `decorators <#via-decorators>`_,
`handlers registration <#via-handler-registration-method>`_ or
`filters <via-filters>`_.

Via decorators
==============

For example mark handler with `chat_action` flag

.. code-block:: python

    from aiogram import flags

    @flags.chat_action
    async def my_handler(message: Message)

Or just for rate-limit or something else

.. code-block:: python

    from aiogram import flags

    @flags.rate_limit(rate=2, key="something")
    async def my_handler(message: Message)

Via handler registration method
===============================

.. code-block:: python

    @router.message(..., flags={'chat_action': 'typing', 'rate_limit': {'rate': 5}})

Via filters
===========

.. code-block:: python

    class Command(Filter):
        ...

        def update_handler_flags(self, flags: Dict[str, Any]) -> None:
            commands = flags.setdefault("commands", [])
            commands.append(self)



Use in middlewares
==================

.. automodule:: aiogram.dispatcher.flags
    :members: extract_flags, get_flag, check_flags


Example in middlewares
----------------------

.. code-block:: python

    async def my_middleware(handler, event, data):
        typing = get_flag(data, "typing")  # Check that handler marked with `typing` flag
        if not typing:
            return await handler(event, data)

        async with ChatActionSender.typing(chat_id=event.chat.id):
            return await handler(event, data)

Use in utilities
================

For example you can collect all registered commands with handler description and then it can be used for generating commands help

.. code-block:: python

    def collect_commands(router: Router) -> Generator[Tuple[Command, str], None, None]:
        for handler in router.message.handlers:
            if "commands" not in handler.flags:  # ignore all handler without commands
                continue
            # the Command filter adds the flag with list of commands attached to the handler
            for command in handler.flags["commands"]:
                yield command, handler.callback.__doc__ or ""
        # Recursively extract commands from nested routers
        for sub_router in router.sub_routers:
            yield from collect_commands(sub_router)

File: dispatcher/index.rst
===============
Handling events
===============

*aiogram* includes Dispatcher mechanism.
Dispatcher is needed for handling incoming updates from Telegram.

With dispatcher you can do:

- Handle incoming updates;
- Filter incoming events before it will be processed by specific handler;
- Modify event and related data in middlewares;
- Separate bot functionality between different handlers, modules and packages

Dispatcher is also separated into two entities - Router and Dispatcher.
Dispatcher is subclass of router and should be always is root router.

Telegram supports two ways of receiving updates:

- :ref:`Webhook <webhook>` - you should configure your web server to receive updates from Telegram;
- :ref:`Long polling <long-polling>` - you should request updates from Telegram.

So, you can use both of them with *aiogram*.

.. toctree::

    router
    dispatcher
    dependency_injection
    filters/index
    long_polling
    finite_state_machine/index
    middlewares
    errors
    flags
    webhook
    class_based_handlers/index

File: dispatcher/long_polling.rst
.. _long-polling:

############
Long-polling
############

Long-polling is a technology that allows a Telegram server to send updates in case
when you don't have dedicated IP address or port to receive webhooks for example
on a developer machine.

To use long-polling mode you should use :meth:`aiogram.dispatcher.dispatcher.Dispatcher.start_polling`
or :meth:`aiogram.dispatcher.dispatcher.Dispatcher.run_polling` methods.

.. note::

    You can use polling from only one polling process per single Bot token,
    in other case Telegram server will return an error.

.. note::

    If you will need to scale your bot, you should use webhooks instead of long-polling.

.. note::

    If you will use multibot mode, you should use webhook mode for all bots.

Example
=======

This example will show you how to create simple echo bot based on long-polling.

.. literalinclude:: ../../examples/echo_bot.py

File: dispatcher/middlewares.rst
.. _middlewares:

===========
Middlewares
===========

**aiogram** provides powerful mechanism for customizing event handlers via middlewares.

Middlewares in bot framework seems like Middlewares mechanism in web-frameworks
like `aiohttp <https://docs.aiohttp.org/en/stable/web_advanced.html#aiohttp-web-middlewares>`_,
`fastapi <https://fastapi.tiangolo.com/tutorial/middleware/>`_,
`Django <https://docs.djangoproject.com/en/3.0/topics/http/middleware/>`_ or etc.)
with small difference - here is implemented two layers of middlewares (before and after filters).

.. note::

    Middleware is function that triggered on every event received from
    Telegram Bot API in many points on processing pipeline.

Base theory
===========

As many books and other literature in internet says:

   Middleware is reusable software that leverages patterns and frameworks to bridge
   the gap between the functional requirements of applications and the underlying operating systems,
   network protocol stacks, and databases.

Middleware can modify, extend or reject processing event in many places of pipeline.

Basics
======

Middleware instance can be applied for every type of Telegram Event (Update, Message, etc.) in two places

1. Outer scope - before processing filters (:code:`<router>.<event>.outer_middleware(...)`)
2. Inner scope - after processing filters but before handler (:code:`<router>.<event>.middleware(...)`)

.. image:: ../_static/basics_middleware.png
    :alt: Middleware basics

.. attention::

    Middleware should be subclass of :code:`BaseMiddleware` (:code:`from aiogram import BaseMiddleware`) or any async callable

Arguments specification
=======================

.. autoclass:: aiogram.dispatcher.middlewares.base.BaseMiddleware
    :members:
    :show-inheritance:
    :member-order: bysource
    :special-members: __init__, __call__
    :undoc-members: True


Examples
========

.. danger::

    Middleware should always call :code:`await handler(event, data)` to propagate event for next middleware/handler.
    If you want to stop processing event in middleware you should not call :code:`await handler(event, data)`.


Class-based
-----------
.. code-block:: python

    from aiogram import BaseMiddleware
    from aiogram.types import Message


    class CounterMiddleware(BaseMiddleware):
        def __init__(self) -> None:
            self.counter = 0

        async def __call__(
            self,
            handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
            event: Message,
            data: Dict[str, Any]
        ) -> Any:
            self.counter += 1
            data['counter'] = self.counter
            return await handler(event, data)

and then

.. code-block:: python3

    router = Router()
    router.message.middleware(CounterMiddleware())


Function-based
--------------

.. code-block:: python3

    @dispatcher.update.outer_middleware()
    async def database_transaction_middleware(
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        async with database.transaction():
            return await handler(event, data)


Facts
=====

1. Middlewares from outer scope will be called on every incoming event
2. Middlewares from inner scope will be called only when filters pass
3. Inner middlewares is always calls for :class:`aiogram.types.update.Update` event type in due to all incoming updates going to specific event type handler through built in update handler

File: dispatcher/router.rst
.. _Router:

######
Router
######

Usage:

.. code-block:: python

    from aiogram import Router
    from aiogram.types import Message

    my_router = Router(name=__name__)

    @my_router.message()
    async def message_handler(message: Message) -> Any:
        await message.answer('Hello from my router!')


.. autoclass:: aiogram.dispatcher.router.Router
    :members: __init__, include_router, include_routers, resolve_used_update_types
    :show-inheritance:


.. _Event observers:

Event observers
===============

.. warning::

    All handlers always should be asynchronous.
    The name of the handler function is not important. The event argument name is also not important but it is recommended to not overlap the name with contextual data in due to function can not accept two arguments with the same name.

Here is the list of available observers and examples of how to register handlers

In these examples only decorator-style registering handlers are used, but if you don't like @decorators just use :obj:`<event type>.register(...)` method instead.

Message
-------


.. attention::

    Be attentive with filtering this event

    You should expect that this event can be with different sets of attributes in different cases

    (For example text, sticker and document are always of different content types of message)

    Recommended way to check field availability before usage, for example via :ref:`magic filter <magic-filters>`:
    :code:`F.text` to handle text, :code:`F.sticker` to handle stickers only and etc.


.. code-block:: python

    @router.message()
    async def message_handler(message: types.Message) -> Any: pass


Edited message
--------------

.. code-block:: python

    @router.edited_message()
    async def edited_message_handler(edited_message: types.Message) -> Any: pass

Channel post
------------

.. code-block:: python

    @router.channel_post()
    async def channel_post_handler(channel_post: types.Message) -> Any: pass

Edited channel post
-------------------

.. code-block:: python

    @router.edited_channel_post()
    async def edited_channel_post_handler(edited_channel_post: types.Message) -> Any: pass


Inline query
------------

.. code-block:: python

    @router.inline_query()
    async def inline_query_handler(inline_query: types.InlineQuery) -> Any: pass

Chosen inline query
-------------------

.. code-block:: python

    @router.chosen_inline_result()
    async def chosen_inline_result_handler(chosen_inline_result: types.ChosenInlineResult) -> Any: pass

Callback query
--------------

.. code-block:: python

    @router.callback_query()
    async def callback_query_handler(callback_query: types.CallbackQuery) -> Any: pass

Shipping query
--------------

.. code-block:: python

    @router.shipping_query()
    async def shipping_query_handler(shipping_query: types.ShippingQuery) -> Any: pass

Pre checkout query
------------------

.. code-block:: python

    @router.pre_checkout_query()
    async def pre_checkout_query_handler(pre_checkout_query: types.PreCheckoutQuery) -> Any: pass

Poll
----

.. code-block:: python

    @router.poll()
    async def poll_handler(poll: types.Poll) -> Any: pass

Poll answer
-----------

.. code-block:: python

    @router.poll_answer()
    async def poll_answer_handler(poll_answer: types.PollAnswer) -> Any: pass


My chat member
--------------

.. code-block:: python

    @router.my_chat_member()
    async def my_chat_member_handler(my_chat_member: types.ChatMemberUpdated) -> Any: pass


Chat member
-----------

.. code-block:: python

    @router.chat_member()
    async def chat_member_handler(chat_member: types.ChatMemberUpdated) -> Any: pass


Chat join request
-----------------

.. code-block:: python

    @router.chat_join_request()
    async def chat_join_request_handler(chat_join_request: types.ChatJoinRequest) -> Any: pass


Message reaction
----------------

.. code-block:: python

    @router.message_reaction()
    async def message_reaction_handler(message_reaction: types.MessageReactionUpdated) -> Any: pass


Message reaction count
----------------------

.. code-block:: python

    @router.message_reaction_count()
    async def message_reaction_count_handler(message_reaction_count: types.MessageReactionCountUpdated) -> Any: pass


Chat boost
----------

.. code-block:: python

    @router.chat_boost()
    async def chat_boost_handler(chat_boost: types.ChatBoostUpdated) -> Any: pass


Remove chat boost
-----------------

.. code-block:: python

    @router.removed_chat_boost()
    async def removed_chat_boost_handler(removed_chat_boost: types.ChatBoostRemoved) -> Any: pass


Errors
------

.. code-block:: python

    @router.errors()
    async def error_handler(exception: types.ErrorEvent) -> Any: pass

Is useful for handling errors from other handlers, error event described :ref:`here <error-event>`



.. _Nested routers:

Nested routers
==============

.. warning::

    Routers by the way can be nested to an another routers with some limitations:
        1. Router **CAN NOT** include itself
        1. Routers **CAN NOT** be used for circular including (router 1 include router 2, router 2 include router 3, router 3 include router 1)


Example:

.. code-block:: python
    :caption: module_1.py
    :name: module_1

    router2 = Router()

    @router2.message()
    ...


.. code-block:: python
    :caption: module_2.py
    :name: module_2

    from module_2 import router2


    router1 = Router()
    router1.include_router(router2)


Update
------

.. code-block:: python

    @dispatcher.update()
    async def message_handler(update: types.Update) -> Any: pass

.. warning::

    The only root Router (Dispatcher) can handle this type of event.

.. note::

    Dispatcher already has default handler for this event type, so you can use it for handling all updates that are not handled by any other handlers.

How it works?
-------------

For example, dispatcher has 2 routers, the last router also has one nested router:

.. image:: ../_static/nested_routers_example.png
    :alt: Nested routers example

In this case update propagation flow will have form:

.. image:: ../_static/update_propagation_flow.png
    :alt: Nested routers example

File: dispatcher/webhook.rst
.. _webhook:

#######
Webhook
#######

Telegram Bot API supports webhook.
If you set webhook for your bot, Telegram will send updates to the specified url.
You can use :meth:`aiogram.methods.set_webhook.SetWebhook` method to specify a url
and receive incoming updates on it.

.. note::

    If you use webhook, you can't use long polling at the same time.

Before start i'll recommend you to read `official Telegram's documentation about webhook <https://core.telegram.org/bots/webhooks>`_

After you read it, you can start to read this section.

Generally to use webhook with aiogram you should use any async web framework.
By out of the box aiogram has an aiohttp integration, so we'll use it.

.. note::

    You can use any async web framework you want, but you should write your own integration if you don't use aiohttp.


aiohttp integration
===================

Out of the box aiogram has aiohttp integration, so you can use it.

Here is available few ways to do it using different implementations of the webhook controller:

- :class:`aiogram.webhook.aiohttp_server.BaseRequestHandler` - Abstract class for aiohttp webhook controller
- :class:`aiogram.webhook.aiohttp_server.SimpleRequestHandler`  - Simple webhook controller, uses single Bot instance
- :class:`aiogram.webhook.aiohttp_server.TokenBasedRequestHandler`  - Token based webhook controller, uses multiple Bot instances and tokens

You can use it as is or inherit from it and override some methods.

.. autoclass:: aiogram.webhook.aiohttp_server.BaseRequestHandler
    :members: __init__, register, close, resolve_bot, verify_secret, handle

.. autoclass:: aiogram.webhook.aiohttp_server.SimpleRequestHandler
    :members: __init__, register, close, resolve_bot, verify_secret, handle

.. autoclass:: aiogram.webhook.aiohttp_server.TokenBasedRequestHandler
    :members: __init__, register, close, resolve_bot, verify_secret, handle

Security
--------

Telegram supports two methods to verify incoming requests that they are from Telegram:

Using a secret token
~~~~~~~~~~~~~~~~~~~~

When you set webhook, you can specify a secret token and then use it to verify incoming requests.

Using IP filtering
~~~~~~~~~~~~~~~~~~

You can specify a list of IP addresses from which you expect incoming requests, and then use it to verify incoming requests.

It can be acy using firewall rules or nginx configuration or middleware on application level.

So, aiogram has an implementation of the IP filtering middleware for aiohttp.

.. autofunction:: aiogram.webhook.aiohttp_server.ip_filter_middleware

.. autoclass:: aiogram.webhook.security.IPFilter
    :members: __init__, allow, allow_ip, default, check

Examples
--------

Behind reverse proxy
~~~~~~~~~~~~~~~~~~~~

In this example we'll use aiohttp as web framework and nginx as reverse proxy.

.. literalinclude:: ../../examples/echo_bot_webhook.py

When you use nginx as reverse proxy, you should set `proxy_pass` to your aiohttp server address.

.. code-block:: nginx

    location /webhook {
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect off;
        proxy_buffering off;
        proxy_pass http://127.0.0.1:8080;
    }


Without reverse proxy (not recommended)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In case without using reverse proxy, you can use aiohttp's ssl context.

Also this example contains usage with self-signed certificate.

.. literalinclude:: ../../examples/echo_bot_webhook_ssl.py


With using other web framework
==============================

You can pass incoming request to aiogram's webhook controller from any web framework you want.

Read more about it in :meth:`aiogram.dispatcher.dispatcher.Dispatcher.feed_webhook_update`
or :meth:`aiogram.dispatcher.dispatcher.Dispatcher.feed_update` methods.

.. code-block:: python

    update = Update.model_validate(await request.json(), context={"bot": bot})
    await dispatcher.feed_update(update)


.. note::

    If you want to use reply into webhook, you should check that result of the :code:`feed_update`
    methods is an instance of API method and build :code:`multipart/form-data`
    or :code:`application/json` response body manually.

File: index.rst
.. include:: ../README.rst

Simple usage
------------

.. literalinclude:: ../examples/echo_bot.py


Usage without dispatcher
------------------------

Just only interact with Bot API, without handling events

.. literalinclude:: ../examples/without_dispatcher.py


Contents
========

.. toctree::
    :maxdepth: 3

    install
    migration_2_to_3
    api/index
    dispatcher/index
    utils/index
    changelog
    contributing

File: utils/callback_answer.rst
.. _callback-answer-util:
===============
Callback answer
===============

Helper for callback query handlers, can be useful in bots with a lot of callback
handlers to automatically take answer to all requests.

Simple usage
============

For use, it is enough to register the inner middleware :class:`aiogram.utils.callback_answer.CallbackAnswerMiddleware` in dispatcher or specific router:

.. code-block:: python

    dispatcher.callback_query.middleware(CallbackAnswerMiddleware())

After that all handled callback queries will be answered automatically after processing the handler.

Advanced usage
==============

In some cases you need to have some non-standard response parameters, this can be done in several ways:

Global defaults
---------------

Change default parameters while initializing middleware, for example change answer to `pre` mode and text "OK":

.. code-block:: python

    dispatcher.callback_query.middleware(CallbackAnswerMiddleware(pre=True, text="OK"))


Look at :class:`aiogram.utils.callback_answer.CallbackAnswerMiddleware` to get all available parameters


Handler specific
----------------

By using :ref:`flags <flags>` you can change the behavior for specific handler

.. code-block:: python

    @router.callback_query(<filters>)
    @flags.callback_answer(text="Thanks", cache_time=30)
    async def my_handler(query: CallbackQuery):
        ...

Flag arguments is the same as in :class:`aiogram.utils.callback_answer.CallbackAnswerMiddleware`
with additional one :code:`disabled` to disable answer.

A special case
--------------

It is not always correct to answer the same in every case,
so there is an option to change the answer inside the handler. You can get an instance of :class:`aiogram.utils.callback_answer.CallbackAnswer` object inside handler and change whatever you want.

.. danger::

    Note that is impossible to change callback answer attributes when you use :code:`pre=True` mode.

.. code-block:: python

    @router.callback_query(<filters>)
    async def my_handler(query: CallbackQuery, callback_answer: CallbackAnswer):
        ...
        if <everything is ok>:
            callback_answer.text = "All is ok"
        else:
            callback_answer.text = "Something wrong"
            callback_answer.cache_time = 10


Combine that all at once
------------------------

For example you want to answer in most of cases before handler with text "🤔" but at some cases need to answer after the handler with custom text,
so you can do it:

.. code-block:: python

    dispatcher.callback_query.middleware(CallbackAnswerMiddleware(pre=True, text="🤔"))

    @router.callback_query(<filters>)
    @flags.callback_answer(pre=False, cache_time=30)
    async def my_handler(query: CallbackQuery):
        ...
        if <everything is ok>:
            callback_answer.text = "All is ok"


Description of objects
======================

.. autoclass:: aiogram.utils.callback_answer.CallbackAnswerMiddleware
    :show-inheritance:
    :member-order: bysource
    :special-members: __init__
    :members:

.. autoclass:: aiogram.utils.callback_answer.CallbackAnswer
    :show-inheritance:
    :member-order: bysource
    :special-members: __init__
    :members:

File: utils/chat_action.rst
==================
Chat action sender
==================

Sender
======

.. autoclass:: aiogram.utils.chat_action.ChatActionSender
    :members: __init__,running,typing,upload_photo,record_video,upload_video,record_voice,upload_voice,upload_document,choose_sticker,find_location,record_video_note,upload_video_note

Usage
-----

.. code-block:: python

    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        # Do something...
        # Perform some long calculations
        await message.answer(result)


Middleware
==========

.. autoclass:: aiogram.utils.chat_action.ChatActionMiddleware


Usage
-----

Before usa should be registered for the `message` event

.. code-block:: python

    <router or dispatcher>.message.middleware(ChatActionMiddleware())

After this action all handlers which works longer than `initial_sleep` will produce the '`typing`' chat action.

Also sender can be customized via flags feature for particular handler.

Change only action type:

.. code-block:: python

    @router.message(...)
    @flags.chat_action("sticker")
    async def my_handler(message: Message): ...


Change sender configuration:

.. code-block:: python

    @router.message(...)
    @flags.chat_action(initial_sleep=2, action="upload_document", interval=3)
    async def my_handler(message: Message): ...

File: utils/deep_linking.rst
============
Deep Linking
============

Telegram bots have a deep linking mechanism, that allows for passing
additional parameters to the bot on startup. It could be a command that
launches the bot — or an auth token to connect the user's Telegram
account to their account on some external service.

You can read detailed description in the source:
https://core.telegram.org/bots/features#deep-linking

We have added some utils to get deep links more handy.

Examples
========

Basic link example
------------------

.. code-block:: python

    from aiogram.utils.deep_linking import create_start_link

    link = await create_start_link(bot, 'foo')

    # result: 'https://t.me/MyBot?start=foo'

Encoded link
------------

.. code-block:: python

    from aiogram.utils.deep_linking import create_start_link

    link = await create_start_link(bot, 'foo', encode=True)
    # result: 'https://t.me/MyBot?start=Zm9v'

Decode it back
--------------

.. code-block:: python

    from aiogram.utils.deep_linking import decode_payload
    from aiogram.filters import CommandStart, CommandObject
    from aiogram.types import Message

    @router.message(CommandStart(deep_link=True))
    async def handler(message: Message, command: CommandObject):
        args = command.args
        payload = decode_payload(args)
        await message.answer(f"Your payload: {payload}")


References
==========

.. autofunction:: aiogram.utils.deep_linking.create_start_link

.. autofunction:: aiogram.utils.deep_linking.create_startgroup_link

.. autofunction:: aiogram.utils.deep_linking.create_startapp_link

.. autofunction:: aiogram.utils.deep_linking.decode_payload

File: utils/formatting.rst
.. _formatting-tool:

==========
Formatting
==========

Make your message formatting flexible and simple

This instrument works on top of Message entities instead of using HTML or Markdown markups,
you can easily construct your message and sent it to the Telegram without the need to
remember tag parity (opening and closing) or escaping user input.

Usage
=====

Basic scenario
--------------

Construct your message and send it to the Telegram.

.. code-block:: python

    content = Text("Hello, ", Bold(message.from_user.full_name), "!")
    await message.answer(**content.as_kwargs())

Is the same as the next example, but without usage markup

.. code-block:: python

    await message.answer(
        text=f"Hello, <b>{html.quote(message.from_user.full_name)}</b>!",
        parse_mode=ParseMode.HTML
    )

Literally when you execute :code:`as_kwargs` method the Text object is converted
into text :code:`Hello, Alex!` with entities list :code:`[MessageEntity(type='bold', offset=7, length=4)]`
and passed into dict which can be used as :code:`**kwargs` in API call.

The complete list of elements is listed `on this page below <#available-elements>`_.

Advanced scenario
-----------------

On top of base elements can be implemented content rendering structures,
so, out of the box aiogram has a few already implemented functions that helps you to format
your messages:

.. autofunction:: aiogram.utils.formatting.as_line

.. autofunction:: aiogram.utils.formatting.as_list

.. autofunction:: aiogram.utils.formatting.as_marked_list

.. autofunction:: aiogram.utils.formatting.as_numbered_list

.. autofunction:: aiogram.utils.formatting.as_section

.. autofunction:: aiogram.utils.formatting.as_marked_section

.. autofunction:: aiogram.utils.formatting.as_numbered_section

.. autofunction:: aiogram.utils.formatting.as_key_value

and lets complete them all:

.. code-block:: python

    content = as_list(
        as_marked_section(
            Bold("Success:"),
            "Test 1",
            "Test 3",
            "Test 4",
            marker="✅ ",
        ),
        as_marked_section(
            Bold("Failed:"),
            "Test 2",
            marker="❌ ",
        ),
        as_marked_section(
            Bold("Summary:"),
            as_key_value("Total", 4),
            as_key_value("Success", 3),
            as_key_value("Failed", 1),
            marker="  ",
        ),
        HashTag("#test"),
        sep="\n\n",
    )

Will be rendered into:

  **Success:**

  ✅ Test 1

  ✅ Test 3

  ✅ Test 4

  **Failed:**

  ❌ Test 2

  **Summary:**

   **Total**: 4

   **Success**: 3

   **Failed**: 1

  #test


Or as HTML:

.. code-block:: html

    <b>Success:</b>
    ✅ Test 1
    ✅ Test 3
    ✅ Test 4

    <b>Failed:</b>
    ❌ Test 2

    <b>Summary:</b>
      <b>Total:</b> 4
      <b>Success:</b> 3
      <b>Failed:</b> 1

    #test

Available methods
=================

.. autoclass:: aiogram.utils.formatting.Text
    :members:
    :show-inheritance:
    :member-order: bysource
    :special-members: __init__


Available elements
==================

.. autoclass:: aiogram.utils.formatting.Text
    :show-inheritance:
    :noindex:

.. autoclass:: aiogram.utils.formatting.HashTag
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.CashTag
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.BotCommand
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.Url
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.Email
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.PhoneNumber
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.Bold
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.Italic
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.Underline
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.Strikethrough
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.Spoiler
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.Code
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.Pre
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.TextLink
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.TextMention
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.CustomEmoji
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.BlockQuote
    :show-inheritance:

.. autoclass:: aiogram.utils.formatting.ExpandableBlockQuote
    :show-inheritance:

File: utils/i18n.rst
===========
Translation
===========

In order to make you bot translatable you have to add a minimal number of hooks to your Python code.

These hooks are called translation strings.

The aiogram translation utils is build on top of `GNU gettext Python module <https://docs.python.org/3/library/gettext.html>`_
and `Babel library <http://babel.pocoo.org/en/latest/>`_.

Installation
============

Babel is required to make simple way to extract translation strings from your code

Can be installed from pip directly:

.. code-block:: bash

    pip install Babel


or as `aiogram` extra dependency:

.. code-block:: bash

    pip install aiogram[i18n]


Make messages translatable
==========================

In order to gettext need to know what the strings should be translated you will need to write translation strings.

For example:

.. code-block:: python
    :emphasize-lines: 6-8

    from aiogram import html
    from aiogram.utils.i18n import gettext as _

    async def my_handler(message: Message) -> None:
        await message.answer(
            _("Hello, {name}!").format(
                name=html.quote(message.from_user.full_name)
            )
        )


.. danger::

    f-strings can't be used as translations string because any dynamic variables should be added to message after getting translated message


Also if you want to use translated string in keyword- or magic- filters you will need to use lazy gettext calls:


.. code-block:: python
    :emphasize-lines: 4

    from aiogram import F
    from aiogram.utils.i18n import lazy_gettext as __

    @router.message(F.text == __("My menu entry"))
    ...


.. danger::

    Lazy gettext calls should always be used when the current language is not know at the moment


.. danger::

    Lazy gettext can't be used as value for API methods or any Telegram Object (like :class:`aiogram.types.inline_keyboard_button.InlineKeyboardButton` or etc.)

**Working with plural forms**

The `gettext` from `aiogram.utils.i18n` is the one alias for two functions _gettext_ and _ngettext_
of `GNU gettext Python module <https://docs.python.org/3/library/gettext.html>`_. Therefore, the wrapper for message
strings is the same `_()`. You need to pass three parameters to the function:
a singular string, a plural string, and a value.

.. code-block:: python
    :emphasize-lines: 6, 10
    from aiogram import html
    from aiogram.utils.i18n import gettext as _

    async def my_handler(message: Message) -> None:
        try:
            n = int(message.text)
        except ValueError:
            n = 1
        await message.answer(
            _("You ordered {n} piece.", "You ordered {n} pieces.",n).format(n)
            )
        )

Configuring engine
==================

After you messages is already done to use gettext your bot should know how to detect user language

On top of your application the instance of :class:`aiogram.utils.i18n.I18n` should be created


.. code-block::

    i18n = I18n(path="locales", default_locale="en", domain="messages")


After that you will need to choose one of builtin I18n middleware or write your own.

Builtin middlewares:


SimpleI18nMiddleware
~~~~~~~~~~~~~~~~~~~~

.. autoclass:: aiogram.utils.i18n.middleware.SimpleI18nMiddleware
    :members: __init__

ConstI18nMiddleware
~~~~~~~~~~~~~~~~~~~

.. autoclass:: aiogram.utils.i18n.middleware.ConstI18nMiddleware
    :members: __init__

FSMI18nMiddleware
~~~~~~~~~~~~~~~~~

.. autoclass:: aiogram.utils.i18n.middleware.FSMI18nMiddleware
    :members: __init__,set_locale


I18nMiddleware
~~~~~~~~~~~~~~

or define you own based on abstract I18nMiddleware middleware:

.. autoclass:: aiogram.utils.i18n.middleware.I18nMiddleware
    :members: __init__,setup,get_locale


Deal with Babel
===============

Step 1 Extract messages
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    pybabel extract --input-dirs=. -o locales/messages.pot


Here is :code:`--input-dirs=.` - path to code and the :code:`locales/messages.pot`
is template where messages will be extracted and `messages` is translation domain.

**Working with plural forms**

Extracting with Pybabel all strings options:

- :code:`-k _:1,1t -k _:1,2` - for both singular and plural
- :code:`-k __` - for lazy strings

.. code-block:: bash

    pybabel extract -k _:1,1t -k _:1,2 -k __ --input-dirs=. -o locales/messages.pot

.. note::

    Some useful options:

    - Add comments for translators, you can use another tag if you want (TR) :code:`--add-comments=NOTE`
    - Contact email for bugreport :code:`--msgid-bugs-address=EMAIL`
    - Disable comments with string location in code :code:`--no-location`
    - Copyrights :code:`--copyright-holder=AUTHOR`
    - Set project name :code:`--project=MySuperBot`
    - Set version :code:`--version=2.2`


Step 2: Init language
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    pybabel init -i locales/messages.pot -d locales -D messages -l en

- :code:`-i locales/messages.pot` - pre-generated template
- :code:`-d locales` - translations directory
- :code:`-D messages` - translations domain
- :code:`-l en` - language. Can be changed to any other valid language code (For example :code:`-l uk` for ukrainian language)


Step 3: Translate texts
~~~~~~~~~~~~~~~~~~~~~~~

To open .po file you can use basic text editor or any PO editor, e.g. `Poedit <https://poedit.net/>`_

Just open the file named :code:`locales/{language}/LC_MESSAGES/messages.po` and write translations

Step 4: Compile translations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    pybabel compile -d locales -D messages


Step 5: Updating messages
~~~~~~~~~~~~~~~~~~~~~~~~~~

When you change the code of your bot you need to update po & mo files

- Step 5.1: regenerate pot file: command from step 1
- Step 5.2: update po files
    .. code-block::

        pybabel update -d locales -D messages -i locales/messages.pot

- Step 5.3: update your translations: location and tools you know from step 3
- Step 5.4: compile mo files: command from step 4

File: utils/index.rst
=====
Utils
=====

.. toctree::

    keyboard
    i18n
    chat_action
    web_app
    callback_answer
    formatting
    media_group
    deep_linking
    serialization

File: utils/keyboard.rst
.. _Keyboard builder:

================
Keyboard builder
================

Keyboard builder helps to dynamically generate markup.

.. note::

    Note that if you have static markup, it's best to define it explicitly rather than using builder,
    but if you have dynamic markup configuration, feel free to use builder as you wish.


Usage example
=============

For example you want to generate inline keyboard with 10 buttons

.. code-block:: python

    builder = InlineKeyboardBuilder()

    for index in range(1, 11):
        builder.button(text=f"Set {index}", callback_data=f"set:{index}")


then adjust this buttons to some grid, for example first line will have 3 buttons, the next lines will have 2 buttons

.. code-block::

    builder.adjust(3, 2)

also you can attach another builder to this one

.. code-block:: python

    another_builder = InlineKeyboardBuilder(...)...  # Another builder with some buttons
    builder.attach(another_builder)

or you can attach some already generated markup

.. code-block:: python

    markup = InlineKeyboardMarkup(inline_keyboard=[...])  # Some markup
    builder.attach(InlineKeyboardBuilder.from_markup(markup))

and finally you can export this markup to use it in your message

.. code-block:: python

    await message.answer("Some text here", reply_markup=builder.as_markup())

Reply keyboard builder has the same interface

.. warning::

    Note that you can't attach reply keyboard builder to inline keyboard builder and vice versa


Inline Keyboard
===============

.. autoclass:: aiogram.utils.keyboard.InlineKeyboardBuilder
    :members: __init__, buttons, copy, export, add, row, adjust, from_markup, attach

    .. method:: button(text: str, url: Optional[str] = None, login_url: Optional[LoginUrl] = None, callback_data: Optional[Union[str, CallbackData]] = None, switch_inline_query: Optional[str] = None, switch_inline_query_current_chat: Optional[str] = None, callback_game: Optional[CallbackGame] = None, pay: Optional[bool] = None, **kwargs: Any) -> aiogram.utils.keyboard.InlineKeyboardBuilder
        :noindex:

        Add new inline button to markup

    .. method:: as_markup() -> aiogram.types.inline_keyboard_markup.InlineKeyboardMarkup
        :noindex:

        Construct an InlineKeyboardMarkup

Reply Keyboard
==============

.. autoclass:: aiogram.utils.keyboard.ReplyKeyboardBuilder
    :members: __init__, buttons, copy, export, add, row, adjust, from_markup, attach

    .. method:: button(text: str, request_contact: Optional[bool] = None, request_location: Optional[bool] = None, request_poll: Optional[KeyboardButtonPollType] = None, **kwargs: Any) -> aiogram.utils.keyboard.ReplyKeyboardBuilder
        :noindex:

        Add new button to markup

    .. method:: as_markup() -> aiogram.types.reply_keyboard_markup.ReplyKeyboardMarkup
        :noindex:

        Construct an ReplyKeyboardMarkup

File: utils/media_group.rst
===================
Media group builder
===================

This module provides a builder for media groups, it can be used to build media groups
for :class:`aiogram.types.input_media_photo.InputMediaPhoto`, :class:`aiogram.types.input_media_video.InputMediaVideo`,
:class:`aiogram.types.input_media_document.InputMediaDocument` and :class:`aiogram.types.input_media_audio.InputMediaAudio`.

.. warning::

    :class:`aiogram.types.input_media_animation.InputMediaAnimation`
    is not supported yet in the Bot API to send as media group.


Usage
=====

.. code-block:: python

    media_group = MediaGroupBuilder(caption="Media group caption")

    # Add photo
    media_group.add_photo(media="https://picsum.photos/200/300")
    # Dynamically add photo with known type without using separate method
    media_group.add(type="photo", media="https://picsum.photos/200/300")
    # ... or video
    media_group.add(type="video", media=FSInputFile("media/video.mp4"))


To send media group use :meth:`aiogram.methods.send_media_group.SendMediaGroup` method,
but when you use :class:`aiogram.utils.media_group.MediaGroupBuilder`
you should pass ``media`` argument as ``media_group.build()``.

If you specify ``caption`` in :class:`aiogram.utils.media_group.MediaGroupBuilder`
it will be used as ``caption`` for first media in group.

.. code-block:: python

    await bot.send_media_group(chat_id=chat_id, media=media_group.build())


References
==========

.. autoclass:: aiogram.utils.media_group.MediaGroupBuilder
   :members:

File: utils/serialization.rst
.. _serialization-tool:

=============================
Telegram object serialization
=============================

Serialization
=============

To serialize Python object to Telegram object you can use pydantic serialization methods, for example:

.. code-block:: python

    message_data = { ... }  # Some message data as dict
    message = Message.model_validate(message_data)

If you want to bind serialized object to the Bot instance, you can use context:

.. code-block:: python

    message_data = { ... }  # Some message data as dict
    message = Message.model_validate(message_data, context={"bot": bot})


Deserialization
===============

In cases when you need to deserialize Telegram object to Python object, you can use this module.

To convert Telegram object to Python object excluding files you can use
:func:`aiogram.utils.serialization.deserialize_telegram_object_to_python` function.

.. autofunction:: aiogram.utils.serialization.deserialize_telegram_object_to_python

To convert Telegram object to Python object including files you can use
:func:`aiogram.utils.serialization.deserialize_telegram_object` function,
which returns :class:`aiogram.utils.serialization.DeserializedTelegramObject` object.

.. autofunction:: aiogram.utils.serialization.deserialize_telegram_object

.. autoclass:: aiogram.utils.serialization.DeserializedTelegramObject
    :members:

File: utils/web_app.rst
======
WebApp
======

Telegram Bot API 6.0 announces a revolution in the development of chatbots using WebApp feature.

You can read more details on it in the official `blog <https://telegram.org/blog/notifications-bots#bot-revolution>`_
and `documentation <https://core.telegram.org/bots/webapps>`_.

`aiogram` implements simple utils to remove headache with the data validation from Telegram WebApp on the backend side.

Usage
=====

For example from frontend you will pass :code:`application/x-www-form-urlencoded` POST request
with :code:`_auth` field in body and wants to return User info inside response as :code:`application/json`

.. code-block:: python

    from aiogram.utils.web_app import safe_parse_webapp_init_data
    from aiohttp.web_request import Request
    from aiohttp.web_response import json_response

    async def check_data_handler(request: Request):
        bot: Bot = request.app["bot"]

        data = await request.post()  # application/x-www-form-urlencoded
        try:
            data = safe_parse_webapp_init_data(token=bot.token, init_data=data["_auth"])
        except ValueError:
            return json_response({"ok": False, "err": "Unauthorized"}, status=401)
        return json_response({"ok": True, "data": data.user.dict()})

Functions
=========

.. autofunction:: aiogram.utils.web_app.check_webapp_signature

.. autofunction:: aiogram.utils.web_app.parse_webapp_init_data

.. autofunction:: aiogram.utils.web_app.safe_parse_webapp_init_data


Types
=====

.. autoclass:: aiogram.utils.web_app.WebAppInitData
    :members:
    :member-order: bysource
    :undoc-members: True

.. autoclass:: aiogram.utils.web_app.WebAppUser
    :members:
    :member-order: bysource
    :undoc-members: True

.. autoclass:: aiogram.utils.web_app.WebAppChat
    :members:
    :member-order: bysource
    :undoc-members: True

--- END OF FILE ---